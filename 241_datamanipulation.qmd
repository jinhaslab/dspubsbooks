# Data Manipulation

<iframe width="560" height="315" src="https://www.youtube.com/embed/dTKrAXXmqrw?si=1Lq35jP_6Toyo918" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

## dplyr (tidyverse)
 데이터를 모으는 입장과 데이터를 분석하는 입장은 매우 다릅니다. 데이터를 모을 때는 모으는 연구자의 입장에서 하게되고, 이를 분석하는 연구자에 맞도록 변형하는 과정이 필요합니다. 또한 표를 만들거나 도표를 만드는 과정에서 데이터의 모양을 우리가 원하는 데로 변형할 필요가 있습니다. R에서 이과정을 쉽게 하기 위해 가장 많이 사용되는 것이 dplyr (tidyverse) 입니다. 이를 이용해서 실습해 보겠습니다 
 
```{r tfph1, message = FALSE}
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("htmlTable")) install.packages("htmlTable")
if(!require("haven")) install.packages("haven")
if(!require("DT")) install.packages("DT")
```

```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```
## 실습 데이터 준비
 데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다.. 
 데이터를 불러오겠습니다. 안전보건공단 홈페이에서 자료를 다운 받는게 원칙입니다. 다만 실습을 빠르게 진행하기 위해서, dspubs.org 페이지에 있는 파일을 이용하겠습니다. <br>
 <a href="https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/kwcsData6th.rds"> kwcsData6th.rds </a>
<br>
 자신의 folder에 data 라는 folder가 있는지 확인하십시오. data라는 폴더에 다운로드하고, 불러오도록 하겠습니다. 
```{r}
url <- "https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/kwcsData6th.rds"
download.file(url, "data/tutorKWCS.rds")
kwcs = readRDS("data/tutorKWCS.rds")
```


데이터 10개만 살펴보겠습니다. 이때 head()는 처음 10개, tail() 은 뒤에 10개, slice(5:15) 은 5번째부터 15번째 까지 입니다. 
```{r}
kwcs %>% head() %>% DT::datatable()
```



<br><br>
> 설문지와 변수설명 파일은 아래와 같습니다. <br>

```{r}
download.file("https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/pdf3.pdf", "data/kwcs6thkorea.pdf")

```



## select
 필요한 데이터를 종으로, columns 로 분할하는 것입니다. 즉 변수명으로 데이터를 분할하는 것입니다. 선택될 변수는 변수명과 변수번호(왼쪽 부터 1번)를 이용해서 할 수 있습니다. <br>

처음부터 5번째 변수까지 선택해 보겠습니다 .

```{r, eval=FALSE}
kwcs %>% 
  select(1:5)
```

```{r, eval=FALSE}
kwcs %>% 
  select(id, wt, area, hh_num, hm_01_gender) 
```


```{r, echo=FALSE}
kwcs %>% 
  select(1:5) %>%
  head()
```

 변수명에 job이 들어 있는 경우 선택해 보겠습니다. 

```{r}
kwcs %>% select(contains("job")) %>% head()
```

 select안에서는 " " 안에 문자가 변수 명으로 인식됩니다. 이것은 매우 중요한 개념입니다. 아래의 두 코드는 같은 결과를 줍니다. 외부에서 문자를 입력 받았어도, 바로 적용할 수 있다는 의미 입니다. 

```{r}
kwcs %>% select("job1")
kwcs %>% select(job1)
```

 제외하는 방법은 `-`를 사용합니다. 
 
```{r}
test <- kwcs %>%
  select(id, wt, area) %>%
  head() 
```
```{r}
test
```

`test`라는 데이터셑을 만들었습니다. `id`, `wt`, `area`라는 변수를 갖은 데이터 입니다. 여기서 id라는 변수를 제외하겠습니다. 
```{r}
test %>% select(-1)
test %>% select(-id)
```

## filter

 `filter` 는 특정 조건에 해당하는 행(row)를 선택합니다. 예를 들어 성별 중 남성만, 여성만 선택한 다는가 특정 연령 범위를 선택합니다. 이때 몇몇 조건문을 사용합니다. `==`은 같다는 뜻입니다. 아래와 같이 활용합니다.
```{r}
kwcs %>%
  select(TSEX, AGE) %>%
  filter(AGE ==55) %>%
  head()
```
 `&`는 and `|`는 or 을 의미합니다.  성별과 연령을 동시에 조건을 주도록 하겠습니다. 
```{r}
kwcs %>% 
  select(TSEX, AGE) %>%
  filter(TSEX ==1 & AGE <17) # or == |
```
`!`는 아니라는 표시입니다. 이것을 통해서 간단하게 여러 조건을 생략시킬 수 있습니다. 
```{r}
kwcs %>%
  select(TSEX, AGE) %>%
  filter(TSEX !=1) %>%
  filter(AGE >=16 & AGE <18)
```
 `%in%`를 사용하면 여러 조건을 나열하는 방법으로 선택할 수 있습니다. 명목변수 등에 사용하기 편합니다. 
```{r}
kwcs %>%
  select(TSEX, AGE) %>%
  filter(TSEX %in% c(1, 2)) %>% # %in% allow multiple filtering
  filter(!AGE >16) # ! means negative condition
```
 
## arrange

 arrange는 순차 정렬하는 함수입니다. 정방향, 역방향이 가능합니다. 

```{r}
kwcs %>%
  select(AGE) %>%
  arrange(AGE) %>%
  head()

kwcs %>%
  select(AGE) %>%
  arrange(desc(AGE)) %>%
  head()

```

## mutate

`mutate`는 변수를 변형하는 가장 기본이면서 자주 사용되는 함수 입니다. 반드시 익숙해여쟈 하는 함수 입니다. mutate 단독으로 쓰이기 보다는 여러 조건문인 `ifelse`, `case_when`, `recode`를 이용합니다. 될수 있으면 `ifelse`보다는 `case_when`을 이용하는 것이 향후 SQL 등을 사용할 때 더 편할 수 있어 추천합니다. <br>
 남녀가 현재는 1인 남자, 2가 여자 입니다. 이를 male, female로 바꾸겠습니다. 
```{r}
kwcs %>%
  select(TSEX, AGE) %>%
  mutate(sexgp = case_when(
    TSEX==1 ~ 'male', 
    TSEX==2 ~ 'female'
  )) %>%
  head()
```
이번에는 연령을 5세 단위로 바꾸어 보겠습니다. 그리고 test1이라는 데이터로 변형시켜보겠습니다. 
```{r}
test1 = kwcs %>%
  select(TSEX, AGE) %>%
  mutate(sexgp = case_when(
    TSEX==1 ~ 'male', 
    TSEX==2 ~ 'female'
  )) %>%
  mutate(agegp = case_when(
    AGE <25 ~ "<25",
    AGE <30 ~ "<30", 
    AGE <35 ~ "<35", 
    AGE <40 ~ "<40", 
    AGE <45 ~ "<45", 
    AGE <50 ~ "<50",
    AGE <55 ~ "<55", 
    AGE <60 ~ "<60",
    TRUE ~ "\u226560" # 나머지는 모두 >65 (\u2265는 크거나 같다는 symbol)
  )) %>%
  slice(1:10)
```
 test1에는 sexgp가 female , male 이라고 되어 있네요, 이때 female을 Female로 대문자 변화, male을 Male로 대문자 변환해 보겠습니다. recode를 사용하겠습니다. 
```{r}
test1 
```
 만연 female, male 두개뿐이라면 이 방법이 쉬울 수 있습니다. case_when과 female, male을 적절히 사용하면 되겠습니다. 
```{r}
test1 %>%
  mutate(Sexgp = recode(sexgp, 
                        "female" = "Female", 
                        "male"   = "Male"))
```
 60세 미만을 young, 60세 이상을 old로 구분하여 young female, old female, young male, old male로 바꾸어 보겠습니다. case_when에는 처음에 사용한 것을 제외하고 나머지에서라는 뜻이 포함되어 있지요. 즉 ifelse 가 이미 숨어있습니다. 

```{r}
test1 %>%
  mutate(intgp = case_when(
    AGE <60 & TSEX == 1 ~ "young male", 
    AGE <60 & TSEX == 2 ~ "young female", 
    TSEX == 1 ~ "old male", 
    TSEX == 2 ~ "old female" 
  ))

```
## group_by

 group_by는 데이터 탐색에서 가장 많이 사용되면, 연속변수는 summrise와 명목변수는 count와 같이 사용됩니다. group_by에 의해 변수값에 따라 정리가 되게 됩니다. 새로운 변수은 `heal_prob1`를 사용해 보겠습니다. heal_prob1는 요통여 부이고, 요통이 있으면 1, 없으면 2로 되어 있습니다. 결측값, 무응답이 많으니 heal_prob1 에 무응답이 있는 경우 제외하겠습니다. NA 결측값은 is.na(변수)로 찾을 수 있습니다. 우선 count로 해보겠습니다 .

```{r}
kwcs %>% 
  count(heal_prob1)
```
NA가 59개 있네요. <br>
아래와 같이 sexgp별로 요통을 호소하는 사람이 얼마나 있는지 확인해 보겠습니다. 
```{r}
kwcs %>%
  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻
  select(TSEX, AGE, heal_prob1) %>%
  mutate(sexgp=case_when(
    TSEX==1 ~ "Men", 
    TRUE ~ "Female"
  )) %>%
  group_by(sexgp) %>%
  count(heal_prob1) 
```

 연령별로는 어떠한 비율인지 확인해 보겠습니다. 

```{r}
kwcs %>%
  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻
  select(TSEX, AGE, heal_prob1) %>%
  mutate(sexgp=case_when(
    TSEX==1 ~ "Men", 
    TRUE ~ "Female"
  )) %>%
  mutate(agegp = case_when(
    AGE <25 ~ "<25",
    AGE <30 ~ "<30", 
    AGE <35 ~ "<35", 
    AGE <40 ~ "<40", 
    AGE <45 ~ "<45", 
    AGE <50 ~ "<50",
    AGE <55 ~ "<55", 
    AGE <60 ~ "<60",
    TRUE ~ "\u226560" # 나머지는 모두 >65 (\u2265는 크거나 같다는 symbol)
  ))  %>%
  group_by(agegp) %>%
  count(heal_prob1)
```
 한눈에 파악하기 어렵네요. 그럼 어떻게 하는 것이 좋을 까요, mutate를 통해 율을 구해보는 것이 좋겠습니다. 
 
```{r}
kwcs %>%
  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻
  select(TSEX, AGE, heal_prob1) %>%
  mutate(sexgp=case_when(
    TSEX==1 ~ "Men", 
    TRUE ~ "Female"
  )) %>%
  mutate(agegp = case_when(
    AGE <25 ~ "<25",
    AGE <30 ~ "<30", 
    AGE <35 ~ "<35", 
    AGE <40 ~ "<40", 
    AGE <45 ~ "<45", 
    AGE <50 ~ "<50",
    AGE <55 ~ "<55", 
    AGE <60 ~ "<60",
    TRUE ~ "\u226560" # 나머지는 모두 >65 (\u2265는 크거나 같다는 symbol)
  ))  %>%
  group_by(agegp) %>%
  count(heal_prob1) %>%
  mutate(prob = n/sum(n)) %>% #proportion을 구함
  filter(heal_prob1 == 1) # 요통이 있다고한 사람을 비율만 남김. 
```

 요통의 유병율이 연령이 증가할 수록 점차 증가하고 있네요, 남녀의 차이가 있을 까요? 남녀별 구분을 위해 group_by( )에 sexgp를 추가했습니다 .
 
```{r}
smry1 = kwcs %>%
  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻
  select(TSEX, AGE, heal_prob1) %>%
  mutate(sexgp=case_when(
    TSEX==1 ~ "Men", 
    TRUE ~ "Female"
  )) %>%
  mutate(agegp = case_when(
    AGE <25 ~ "<25",
    AGE <30 ~ "<30", 
    AGE <35 ~ "<35", 
    AGE <40 ~ "<40", 
    AGE <45 ~ "<45", 
    AGE <50 ~ "<50",
    AGE <55 ~ "<55", 
    AGE <60 ~ "<60",
    TRUE ~ "\u226560" # 나머지는 모두 >65 (\u2265는 크거나 같다는 symbol)
  ))  %>%
  group_by(sexgp, agegp) %>% # 성별, 연령별
  count(heal_prob1) %>%
  mutate(prob = n/sum(n)) %>% #proportion을 구함
  filter(heal_prob1 == 1) # 요통이 있다고한 사람을 비율만 남김. 
smry1
```
 
> summarise

 `summarise`는 colum 별로 정리하여 나타낸는 함수 입니다. 이때 주로 같이 사용하는 함수는 mean, sd, median, max, min 등이며, quantile도 많이 사용됩니다. 

```{r}
kwcs %>%
  summarise(mean_age = mean(AGE), 
            std_age  = sd(AGE))
```
group_by와 함께 사용해 볼까요?

```{r}
kwcs %>%
  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻
  select(TSEX, AGE, heal_prob1) %>%
  mutate(sexgp=case_when(
    TSEX==1 ~ "Men", 
    TRUE ~ "Female"
  )) %>%
  group_by(sexgp) %>%
  summarise(mean_age = mean(AGE), 
            std_age  = sd(AGE))
```
중요한 부분인 group_by를 한후에 group을 해제하기 위해서는 ungroup()을 해주어야 합니다. 향후 Table 만들기 등에서 활용되니 기역해 주세요. 

## merge, join

 이번에는 두개의 테이블을 하나로 만들어 보겠습니다. 

```{r}
tab1 <- tibble(id = c(1, 2), var1 = c("a1", "a2"))
tab2 <- tibble(id = c(2, 3), var2 = c("b1", "b2"))
```
```{r}
tab1
tab2
```
 
 이둘을 합쳐 보겠습니다. 
>full join

```{r}
tab1 %>%
  full_join(tab2, by=c("id"))
```
>inner join

```{r}
tab1 %>%
  inner_join(tab2, by=c("id"))
```

>right join

```{r}
tab1 %>%
  right_join(tab2, by=c("id"))
```


>left join

```{r}
tab1 %>%
  left_join(tab2, by=c("id"))
```

어떻게 결과가 예상과 같았나요? 아래와 같이 정리할 수 있습니다. 

<img src="img/tidy_join_fig.PNG" width="600" height="300">


