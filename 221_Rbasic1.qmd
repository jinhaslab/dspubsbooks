# R 속성

## vector matirx list

### objects

값(value)을 변수(variable)에 대입시키는 방법이다. 이를 이용해서 변수를 통한 연산이 가능하다.

```{r, class.source='klippy'}
a <-1
b <-2
c <- -1

a*b+c
```

값에는 숫자 외에도 여러 종류가 가능하다. 대표적인 것이 숫자(numeric), 문자(character), 논리값(logical) 값을 대입시킬 수 있다.

```{r}
student_a_age  <- 43
student_a_name <- '윤진하'
student_a_pass <- FALSE
```

즉, 한변수에 하나의 값을 제공하는 0차원적 개념이다.

### 백터 (Vectors), 팩터 (factors)

백터는 한 변수에 여러개의 값이 존재하는 경우다. 이때 `c()` 를 사용하고 `c`는 **concatenate**의 C이다. 결측값 (missing value) 는 `NA`나 `NAN`으로 표시된다. 백터에는 순서가 존재하므로, `my_vector[i]` 를 이용하여 `i`번째 값을 추출할 수있다.

```{r}
student_all_age <- c(24, 31, 40, 16)
student_all_age
```

각각 아래의 명령에 따라 어떤 값이 나타날지 예상해보자.

```{r, eval=FALSE}
student_all_age[1]
student_all_age[1:2]
student_all_age[c(1, 3)]
student_all_age[-4]
```

숫자로된 백터는 기본 함수를 사용하여 요약값을 나타낼 수 있다. `max(), min(), range(), length(), sum(), mean(), prod(), sd(), var(), sort()` 등이 있다.

```{r}
max(student_all_age)
length(student_all_age)
student_all_name <- c('영희', '철수', '은미', '재석')
summary(student_all_name)
student_all_class <- c('group1','group2', 'group1', 'group2' )
summary(student_all_class)
```

여기서 student_all_class 는 `group`이 `1`과`2`로 나뉘어 있는 것을 볼 수 있다. 이러한 개념은 팩터로 살펴볼 수 있다. 컴퓨터에게 `sutdent_all_class`가 팩터라는 것을 알려주자.

```{r}
student_all_group <-factor(c('group1','group2', 'group1', 'group2' ))
summary(student_all_group)
```

group이 있으니 몇가지 쉬운 이용방법이 생겼다.

```{r}
tapply(student_all_age, student_all_group, mean)
```

미리 이야기 하지만 \*apply에 익수해져야한다. 이제, 1차원의 데이터 형식을 보았다. 메트릭스로 넘어 2차원의 자료를 살펴 보자

### 매트릭스 (Matrix), 데이터프래임 (data frame), 리스트 (list)

우리가 흔히 보았던 엑셀이나 표 형식의 데이터이다. 메트릭스는 행(row)와 열(column)로 구성되어 있고 백터 변수를 행을 기준으로 나열 할지, 열을 기준으로 할지 여부로 구성할 수 있다. 어떤 결과가 나오는지 확인해 보자.

```{r, eval=FALSE}
A1 = matrix( 
     c(1, 2, 3, 4, 5, 6, 7, 8),  # 값 
     nrow=2,                     # 행 갯수
     ncol=4,                     # 열 갯수
     byrow = TRUE)               # 행을 기준으로 순서대로
A1 # 출력
```

그렇다면 똑 같이 `r c(1:8)`를 이용해서 아래의 행렬을 만들어보자

```{r, echo= FALSE }
A2 = matrix( 
     c(1, 2, 3, 4, 5, 6, 7, 8),  # 값 
     nrow=4,                     # 행 갯수
     ncol=2,                     # 열 갯수
     byrow = TRUE)               # 행을 기준으로 순서대로
A2 # 출력
```

행렬이 행(column)에 같은 성질의 값 들로 이루어져 있다면 데이터프래임은 좀더 자유롭다고 볼 수 있다.

```{r}
dspub_class <- data.frame(
  'name'  = student_all_name, 
  'age'   = student_all_age,
  'group' = student_all_group
)
dspub_class
```

데이터프래임 부터는 `tidyverse` 패키지를 사용해서 몇가지를 보겠다. `%>%`는 pipe로 앞에 있는 것을 가지도 뒤에 명령을 하자는 조사 같은 것으로 이해하자. `mutate`는 가로 안에 있는 명령을 수행해서 새로운 변수를 만들라는 것이다.

```{r, message=FALSE, warning=FALSE}
#install.packages("tidyverse")
library(tidyverse)
```

```{r}
dspub_class %>%
  group_by(group) %>%
  summarize(avg = mean(age))

```

과제가 있다. 과제는 `DSpub`내 group1 과 gropu2가 몇개인지와 최고 나이를 맞추는 것이다. 영희/철수에게 첫번째 숙제를, 은미/재석에게 두번째 숙제를 냈다. 과제를 받았다.

```{r}
homework1 <- dspub_class %>%
  group_by(group) %>%
  mutate(avg_age = mean(age))
homework2 <- dspub_class %>%
  group_by(group) %>%
  mutate(max_age = max(age))
```

```{r}
homework1
homework2
```

이것을 어딘가에 저장하고 싶다, 이때 list를 사용할 수 있다.

```{r}
second_week_dspub <-
  list(
       student_all_age,
       student_all_class,
       student_all_group,
       student_all_name,
       dspub_class, 
       homework1,
       homework2
       )
second_week_dspub
```

숙제 과제만 뽑아 내서 보고 싶다면, 해당 list만 출력하면 된다. 즉 list에는 거의 모든 자료가 이질성을 갖고 있더라도 저장된다.

```{r}
second_week_dspub[[7]]
```

## 기초 연산

단순 계산기로 사용할 수 있다. 예를 들어 **1+2** 의 값이라던가, **log2(10)** 등을 계산할 수 있다. Rsutdio 의 스크립트 창이나 콘솔 창에 아래의 항목을 작성해 볼 수 있다.

```{r, basci arithmetic operations, cache=TRUE, eval=FALSE  }
3+4;4-3;4/3;3*4
log2(10)
abs(-4)
sqrt(4)

```

기초 함수는 아래와 같다.

| Operator   | Description                 |
|------------|-----------------------------|
| \+         | addition                    |
| \-         | subtraction                 |
| \*         | multiplication              |
| /          | division                    |
| \^ or \*\* | exponentiation              |
| x %% y     | modulus (x mod y) 5%%2 is 1 |
| x %/% y    | integer division 5%/%2 is 2 |

| Operator  | Description              |
|-----------|--------------------------|
| \<        | less than                |
| \<=       | less than or equal to    |
| \>        | greater than             |
| \>=       | greater than or equal to |
| ==        | exactly equal to         |
| !=        | not equal to             |
| !x        | Not x                    |
| x         | y                        |
| x & y     | x AND y                  |
| isTRUE(x) | test if X is TRUE        |

| Operator                    | Description                                       |
|------------------------------------|------------------------------------|
| Logarithms and exponentials | log2(x), log10(x), exp(x)                         |
| Trigonometric functions     | cos(x), sin(x), tan(x), acos(x), asin(x), atan(x) |
| Others                      | abs(x): absolute value; sqrt(x): square root.     |

기초 함수 중에 몇몇은 그림을 그려보아야 이해가 쉽다.

```{r}
pm10 = rnorm(n=100, mean = 10, sd = 5) # 평균이 10이고 표준편차가 5인 100개의 랜덤 변수를 pm10 이라고 가정하자
date= rep(1:100)  # 1일부터 100까지의 시간이 있다고 해보자
plot(x=date, y=pm10, type = "l") # "l" line 형식으로 그려보았다. 

oz = sin(date) # 오존은 시간에 따라 햇빛이 있을 때 높게 올라간다. sine 함수를 따른다고 가정해 보자
plot(x=date, y = oz, type = "l") # 
oz2 = oz**2 # -값을 갖는 것은 좀 이상하다. 제곱을 통해 변경해 보자
plot(x=date, y = oz2, type = "l") # 
ozabs = abs(oz) # 접곱보다 절대 값이 어떨까?
plot(x=date, y = ozabs, type = "l") # 
pmtrend = pm10 + date  # 시간에 따라 pm10 농도가 올라간다고 가정해 보자
plot(x=date, y = pmtrend, type="l")
pmtrend.log = log(pmtrend) # 로그 값을 넣어보자. 특별한 의미는 없이 함수에 대한 실습이다. 
plot(x=date, y = pmtrend.log, type="l") #
```

## 조건부 연산

`if-else` 라는 조건에 따라 연산을 수행시킨다. 예를 들어 `r 1:10` 의 백터에서 5보다 작으면 A 크면 B를 적용시켜주다.

```{r}
nums<- 1
if (nums <5) {
        chars = 'A'
} else{
        chars = 'B'
}
chars

```

```{r}
nums <- 6
if (nums <5) {
        chars = 'A'
} else{
        chars = 'B'
}
chars
```

몇가지 예제를 더 살펴보자.

```{r}
a<-round(rnorm(10)*10)
a
tab <- ifelse(a>0, '양수', '음수')
tab
data.frame(a, tab)
```

데이터 클리닝에서 자주 사용하는 두개의 조건문 `any()`와 `all()`이 있다. `any()`는 하나라도 `TRUE`값이 있으면 `TRUE`를 변환해주고, `all()`은 모두 `TRUE`여야 `TRUE`를 돌려준다.

```{r}
new.var <- c(1, 2, NA)
is.na(new.var)
any(is.na(new.var))
all(is.na(new.var))
```

index 를 이용하면 조건 문에서 IF (또는 Where)의 개념을 사용할 수 있다. `iris` 데이터에서 `Sepal.Length` 가 가장 큰 값은 찾고, `Sepal.Length` 최고 값을 갖은 `Species`의 종류를 찾고자한다. 어떻게 하면될까?

```{r}
head(iris)
table(iris$Species)
max(iris$Sepal.Length)
max.length <- which.max(iris$Sepal.Length)
iris$Species[max.length]
```

같은 방법으로 `iris` 데이터에서 `Sepal.Length` 가 가장 작은 찾고, `Sepal.Length` 최소 값을 갖은 `Species`의 종류를 찾고자한다. 최소 값과 종류를 쏘보자

```{r}
min(iris$Sepal.Length)
min.length <- which.min(iris$Sepal.Length)
iris$Species[min.length]
```

## 함수 만들기

R을 이용하는 이유중 하나가 함수를 손쉽게 만들고 그 결과를 활용하기가 쉽다는 것이다. 자동문, 반복문, 데이터 클리능, 데이터 시각화 등에서 자주 사용하는 기본 원리이다. 숫자 2개를 넣으면 덧 샘을 해주는 함수를 만들어 보자

```{r}
addtive.function = function(x, y ){
  x + y
}
```

```{r}
addtive.function(100, 2)
```

> 퀴즈

숫자 2개를 넣으면 두 수의 차이를 보여주는 함수를 만들어 보자 `abs` 사용. `#-#`에 계산식을 넣어 함수를 완성해 보세요.

```{r}
abs.function= function(x, y ){
  #--#
}
```

평균을 구해주는 함수 avg를 만들어 보자. `length`는 길이를 말해주니, 몇개의 변수값이 있는 지 알 수 있다.

```{r}
my_vector<- 1:50
avg <- function(x){
        sum(x)/length(x)
}
avg(my_vector)
```

좀더 확장해서 변수 갯수, 평균, 최고, 최저 값을 나타내는 함수를 만들어 보자.

```{r}

tabs <- function(x){
        data.frame( '평균'      = mean(x), 
                    '변수갯수'  = length(x), 
                    '최고값'    = max(x), 
                    '최저값'    = min(x)
        )
}

tabs(my_vector)
```

그럼 이를 이용해서, 다음을 해석해 보자

```{r}
avg <- function(x, arithmetic = TRUE){
  n <- length(x)
  ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
```

## 반복문, vectorization, functionals

### for loop

`r paste0(1:10, "a")` 을 만들어보자, 어떻게 하면될까?

```{r}
c('1a', '2a', '10a') # 이렇게 해보는 것도 좋지만
```

반목문을 사용하면, 아래와 같다.

```{r}
for (i in 1:10){
  print(paste0(i, 'a'))
}
```

물론 대부분 이렇게 사용하지만, 아래와 같이 사용한다.

```{r}
paste0(1:10, "a")
```

`1:n`까지의 숫자 합을 만들어보자, 그리고 이를 1부터 100일때 까지 만들고 그림을 그려보자

```{r chapter4 basic plot}
compute <- function(n){ sum(1:n)}
compute(10)

test <-c()
for (n in 1:100){
  test[n] <- compute(n)
}

plot(1:100, test)
```

### vectorization 과 apply 구문

사실 ifelse 를 잘 사용하지 않는다. 이는 속도의 문제와도 관련된다. 실제 ifesel 로 10분이 걸리는 연산이 1분으로 줄수도 있다. 이때 사용하게 되는 것이 백터화와 apply 구문이다. 이미 **past0(1:10,"a")** 같은 구문이 편할 수 있다는 것을 느꼈을 것이다. 이번에는 구구단 2단과 3단을 서로 곱해보자. 어떻게 하면 좋을까 **for**와 **if**를 생각하기 보다 아래를 고려해 보자. 아래가 백터화이다.

```{r}
n2 <- c(1:9*2)
n3 <- c(1:9*3)
n2*n3

```

2단에 3단이 아닌 다른 단을 곱하는 함수를 사용해 보자

```{r}
new.function<-function(n2){
  c(1:9*2) * c(1:9*n2)
}

new.function( 4)
```

그럼 3단 대신에 `r 1:9` 단을 모두 해보자

```{r}
sapply(1:9, new.function)
```

상기 행렬을 만들기위해 ifelse를 사용하거나 for 문을 사용하면 좀더 머리가 복잡해 질 수 있다. apply 구문은 확실히 머리가 가벼워진다. **tidyverse** 부분을 할 때 `apply, lapply, sapply`등을 다루게 될 것이다.

## iris data 


R을 여러 데이터를 이미 내장하고 있습니다. 이를 통해 여러 통계와 기계학습 등을 연습할 수 있도록 돕고 있습니다. 그 중 가장 유명한 자료인 iris 데이터를 불러오겠습니다.

```{r}
data("iris")
```

iris 데이터셋은 아이리스 꽃에 대한 측정값을 포함하고 있습니다. 이 데이터셋에는 3개의 다른 아이리스 꽃 종류에 대한 총 150개의 샘플이 있습니다. 데이터의 구조는 다음과 같습니다:

-   Sepal.Length (꽃받침 길이)
-   Sepal.Width (꽃받침 너비)
-   Petal.Length (꽃잎 길이)
-   Petal.Width (꽃잎 너비)
-   Species (종): 아이리스 꽃의 종류를 나타냅니다.
    -   이 데이터셋에는 'setosa'(세토사), 'versicolor'(버시컬러), 'virginica'(버지니카)라는 3개의 종류가 있습니다.

```{r}
library(tidyverse)
iris %>% head()
```

R에서 데이터프레임을 행렬 방식으로 선택하는 방법은 대괄호 표기법을 사용하여 [행 번호, 열 번호] 형식으로 선택하는 것입니다. 데이터프레임의 특정 행과 열을 선택할 때는 다음 규칙을 따릅니다:

[행 번호, 열 번호]: 해당 행과 열의 데이터를 선택합니다.
**행 번호**는 데이터프레임의 특정 행을 선택합니다.
**열 번호**는 데이터프레임의 특정 열을 선택합니다.

첫 번째 행과 두 번째 열을 선택: iris[1, 2]는 첫 번째 행의 두 번째 열을 선택합니다. 결과는 첫 번째 꽃의 Sepal.Width 값이 됩니다.

```{r}
iris[1, 2]
```

첫 번째 행 전체를 선택: iris[1, ]는 첫 번째 행의 모든 열을 선택합니다.

```{r}
iris[1, ] 
```

첫 번째 열 전체를 선택: iris[, 1]는 첫 번째 열의 모든 행을 선택합니다.

```{r}
iris[ , 1] %>% head()
```
특정 행과 여러 열을 선택: iris[1, c(1, 3)]는 첫 번째 행의 첫 번째 열과 세 번째 열을 선택합니다.

```{r}
iris[1, c(1, 3)]
```

특정 행과 특정 열을 이름으로 선택: 열의 이름을 직접 사용하여 데이터를 선택할 수도 있습니다. 
예를 들어,  iris[1, "Sepal.Width"]: 첫 번째 행에서 Sepal.Width 열의 값.

```{r}
iris[1, "Sepal.Width"]

```

여러 행과 여러 열 선택: 여러 행과 열을 동시에 선택할 수도 있습니다. 예를 들어, 첫 번째와 세 번째 행, 그리고 첫 번째와 두 번째 열을 선택하려면:

```{r}
iris[c(1, 3), c(1, 2)]

```



`Species` 는 종에 대한 이야기이고, 이것은 문자로 구성되어 있습니다. 나머지는 모두 숫자로 되어 있습니다. 숫자로 되어 있는 변수들에서 평균, 중간, 표준편차를 구해보겠습니다.

이 예제를 통해 apply 구문이 어떻게 사용되는지 알아보겠습니다. 우선 apply구문을 사용하지 않고 구해보겠습니다.



```{r}
iris_num=iris[, c(1:4)] # Species 를 제외한 나머지 변수만 선정
iris_num=iris %>% select(1:4) # tidyverse를 통해 같은 결과 사용
# 아래와 같인 평균, sd 를 구했습니다.
iris_num %>% pull(Sepal.Length) %>% mean()
iris_num %>% pull(Sepal.Width)  %>% mean()
iris_num %>% pull(Petal.Length) %>% mean()
iris_num %>% pull(Petal.Width)  %>% mean()
iris_num %>% pull(Sepal.Length) %>% sd()
iris_num %>% pull(Sepal.Width)  %>% sd()
iris_num %>% pull(Petal.Length) %>% sd()
iris_num %>% pull(Petal.Width)  %>% sd()
```

같은 방식으로 median 도 구할 수 있겠습니다. 그런데, 무언가 반복되는 느낌이 듭니다. 코드를 만들때 반복된다면, 동일한 논리가 반복된다면 함수를 사용할 수 있습니다. 이때 apply 구문을 이용해 보겠습니다. apply는 결과를 백터로, lapply는 결과를 list로 반환해 줍니다. sapply는 lapply 값을 보기 좋게 만들어 줍니다.

```{r}
apply(iris_num, 2, mean)
lapply(iris_num, mean)
sapply(iris_num, mean)
```

그렇다면 이제는 평균, 중간값, 표준편차 모두를 구해보겠습니다. 반복되는 것이니 함수를 만들겠습니다. stat_smry는

```{r}
stat_smry = function(x){
  list(
    mean  =mean(x), 
    median=median(x), 
    std   = sd(x)
  )
}
```

이제 `sapply`를 이용하여 작업해 보겠습니다.

```{r}
sapply(iris_num, stat_smry)
```

개인적으로 저는 lapply를 사용합니다. 그 이유는 단계별 확인 후 합치는 것이 데이터를 분석할 때 유리한 점이 있기 때문입니다. 단계별 확인이란 반복하는 데이터 별로 어디에 문제가 있는지 확인하는 과정이 데이터가 커질 수록 꼭 필요하기 때문입니다. 아래는 lapply로 tt라는 list를 만들고 확인한 후 `do.call(rbidn, .)` 모두 합치는 방식입니다 .rbind 는 row bind 로 list 안에 있는 백터, 데이터프레임 등을 누적해서 합쳐서 하나의 파일로 만드는 것입니다. 복잡하지요, 이해보다는 익숙해 지는 순간이 온 것입니다.

```{r}
tt = lapply(iris_num, stat_smry)
```

```{r}
names(tt) # 각 반복된 요인 이름
tt[[1]]   # 첫번째 여기서는 "Sepal.Length"에대한 값
do.call(rbind, tt) # 정리된 모양
```
