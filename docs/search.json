[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "보건학데이터과학 실습",
    "section": "",
    "text": "소개"
  },
  {
    "objectID": "index.html#보건학",
    "href": "index.html#보건학",
    "title": "보건학데이터과학 실습",
    "section": "보건학",
    "text": "보건학\n보건학은 인간과 그들의 사회의 건강을 향상시키기 위한 과학입니다. 보건학은 의학에서 사회과학에 이르기까지 여러 학문과 밀접하게 연관되어 있습니다. 따라서, 다학제적 접근법은 보건학 전문가에게 가장 중요한 기술 중 하나입니다."
  },
  {
    "objectID": "index.html#보건학-데이터과학",
    "href": "index.html#보건학-데이터과학",
    "title": "보건학데이터과학 실습",
    "section": "보건학 데이터과학",
    "text": "보건학 데이터과학\n데이터 과학은 크게 데이터를 수집, 처리, 분석하고, 그 결과를 해석하여 의사결정이나 예측, 분류 등의 작업을 수행하는 분야입니다. 이를 위해 프로그래밍, 통계학, 머신러닝 및 도메인 지식을 종합적으로 활용합니다. 이러한 기술을 보건학에 접목시키는 것이 보건학 데이터과학입니다.\n보건학 데이터과학의 주요 특징은 다음과 같습니다:\n\n다양한 데이터의 수집 및 관리:\n\n보건학에서는 환자 기록, 임상 데이터, 역학 조사 데이터, 환경 데이터 등 다양한 유형의 데이터를 다룹니다. 이러한 데이터의 효율적인 수집과 관리는 보건학의 데이터과학에서 중요한 부분을 차지합니다.\n\n통계 및 머신러닝의 적용:\n\n공공보건의 문제를 해결하기 위해, 통계적 방법과 머신러닝 기술을 사용하여 데이터에서 통찰력을 얻거나 예측 모델을 만드는 작업을 수행합니다.\n\n데이터 시각화:\n\n복잡한 보건 데이터를 쉽게 이해하고 해석하기 위해 시각화 기술을 사용합니다. 이를 통해 정책 결정자나 일반 대중에게 데이터를 효과적으로 전달할 수 있습니다.\n\n재현성 및 공유 가능한 연구:\n\n보건학 데이터과학에서는 연구 결과의 재현성을 보장하고, 연구 결과를 다른 연구자와 공유할 수 있도록 투명한 방법을 추구합니다.\n\n도메인 지식:\n\n보건학 데이터과학자는 단순히 데이터과학의 기술만을 가지고 있는 것이 아니라, 보건학에 대한 깊은 이해도 필요합니다. 이를 통해 데이터를 올바르게 해석하고, 실제 보건 문제에 적절한 솔루션을 제시할 수 있습니다."
  },
  {
    "objectID": "index.html#보건학-데이터-과학-과학이-되려면",
    "href": "index.html#보건학-데이터-과학-과학이-되려면",
    "title": "보건학데이터과학 실습",
    "section": "보건학 데이터 과학, 과학이 되려면",
    "text": "보건학 데이터 과학, 과학이 되려면\n과학에서의 제현성 과학에서의 재현성은 연구 결과를 다른 연구자들이 동일한 조건 하에서 반복해서 얻을 수 있는지의 여부를 나타내는 중요한 원칙입니다. 재현성은 과학적 연구의 진정성과 신뢰성을 평가하는 기준 중 하나로 간주됩니다.\n보건학 데이터과학이 과학의 기준에 부합하려면 다음과 같은 재현성 요소들을 갖추어야 합니다\n\n데이터의 접근성:\n\n연구에 사용된 원본 데이터는 공개되어야 하며, 연구를 재현하려는 다른 연구자들이 접근할 수 있어야 합니다. 당연히 개인정보 보호와 관련된 법률 및 규정을 준수하면서, 필요한 경우 익명화 또는 변조된 형태로 데이터를 공개해야 합니다.\n\n분석 코드 및 소프트웨어의 공개:\n\n연구에 사용된 데이터 처리, 분석, 시각화 등의 코드와 사용된 소프트웨어의 버전 정보도 공개되어야 합니다.\n\n분석 방법론의 명확성:\n\n사용된 통계적 방법, 머신러닝 알고리즘, 모델링 접근법 등이 명확하게 기술되어야 합니다.\n\n외부 변수 및 제어:\n\n연구 과정에서 영향을 미칠 수 있는 외부 변수들에 대한 정보와 그것들을 어떻게 제어했는지에 대한 정보가 필요합니다.\n\n결과의 재현 가능성 평가:\n\n가능한 경우, 연구 결과의 재현 가능성을 평가하기 위해 독립된 데이터셋이나 방법론을 사용하여 검증을 시도해야 합니다.\n\n연구 환경의 명세:\n\n연구가 수행된 하드웨어 및 소프트웨어 환경, 그리고 이를 설정하기 위한 파라미터 등도 기록되어야 합니다. 이는 특히 계산적으로 복잡한 모델이나 시뮬레이션을 다룰 때 중요합니다.\n\n피어 리뷰:\n\n보건학 데이터과학 연구의 결과는 동료 평가 과정을 거쳐 검증되어야 합니다. 피어 리뷰는 연구의 품질과 재현성을 높이는 데 중요한 역할을 합니다.\n\n\n정리하면 아래와 같은 흐름데로 연구하게 됩니다.\n 이 튜토리얼에서는 R, Rstudio, markdown, Shiny server, PostgreSQL 및 github를 사용할 것입니다. R은 무료 오픈 소스 통계 언어로, 데이터 과학 분야에서 널리 사용됩니다. 가장 중요한 참고 자료는 Rafael A. Irizarry의 책과 Hadley Wickham의 책입니다. 아래와 같습니다."
  },
  {
    "objectID": "index.html#참고-books",
    "href": "index.html#참고-books",
    "title": "보건학데이터과학 실습",
    "section": "참고 books",
    "text": "참고 books\n\n\n\n\n\n\n\n\ntitle\nauthos\nurl\n\n\n\n\nIntroduction to Data Science with R\nRafael A. Irizarry\nhttps://rafalab.github.io/dsbook/\n\n\nR for Data Science\nGarrett Grolemund, Hadley Wickham\nhttps://r4ds.had.co.nz/index.html\n\n\n\n\nI hope you will get valuable experience with me.\n\n그럼 시작하겠습니다.!!! jinha"
  },
  {
    "objectID": "245_datamanipulation_for_table.html#tidyverse",
    "href": "245_datamanipulation_for_table.html#tidyverse",
    "title": "5  Manipulation for table_1",
    "section": "5.1 tidyverse",
    "text": "5.1 tidyverse\n데이터를 모으는 입장과 데이터를 분석하는 입장은 매우 다릅니다. 데이터를 모을 때는 모으는 연구자의 입장에서 하게되고, 이를 분석하는 연구자에 맞도록 변형하는 과정이 필요합니다. 또한 표를 만들거나 도표를 만드는 과정에서 데이터의 모양을 우리가 원하는 데로 변형할 필요가 있습니다. R에서 이과정을 쉽게 하기 위해 가장 많이 사용되는 것이 tidyverse 입니다. 이를 이용해서 실습해 보겠습니다\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"htmlTable\")) install.packages(\"htmlTable\")\nif(!require(\"haven\")) install.packages(\"haven\")\nif(!require(\"DT\")) install.packages(\"DT\")"
  },
  {
    "objectID": "245_datamanipulation_for_table.html#실습-데이터-준비",
    "href": "245_datamanipulation_for_table.html#실습-데이터-준비",
    "title": "5  Manipulation for table_1",
    "section": "5.2 실습 데이터 준비",
    "text": "5.2 실습 데이터 준비\n데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다.. 데이터를 불러오겠습니다. 안전보건공단 홈페이에서 자료를 다운 받는게 원칙입니다. 다만 실습을 빠르게 진행하기 위해서, dspubs.org 페이지에 있는 파일을 이용하겠습니다.   kwcsData6th.rds   자신의 folder에 data 라는 folder가 있는지 확인하십시오. data라는 폴더에 다운로드하고, 불러오도록 하겠습니다.\n\nurl <- \"https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/kwcsData6th.rds\"\ndownload.file(url, \"data/tutorKWCS.rds\")\nkwcs = readRDS(\"data/tutorKWCS.rds\")\n\n\nunicode chart\n\n표를 만들다 보면 크다, 작다, 같다 등은 표시가 쉬운 반면, 크거나 같다, 작거나 같다 등은 표시가 어렵습니다. 이 때 사용해야할 것이 unicode 입니다. 보건학에서 필요한 대표적 유니코드는 사실 2개입니다. 크거나 같다, 작거나 같다. 나머지는 키보드에 이미 있으니 이것을 사용하면 됩니다. 추가적인 unicode는 아래의 항목을 통해 살펴 볼수 있습니다.   Unicode Chart \n\ntibble(\n  \"symbole    \" = c(\"\\u2264\", \"\\u2265\", \"\\u00b1\"), \n  \"unicode    \" = c(\"u2264\", \"u2265\", \"u00b1\")\n) %>% \n  #addHtmlTableStyle(css.cell = c(\"width: 100;\",\"width: 100;\")) %>%\n  htmlTable(caption =\"Simple unicode and symbols\")\n\n\n\n\n\nSimple unicode and symbols\n\nsymbole    \nunicode    \n\n\n\n\n1\n≤\nu2264\n\n\n2\n≥\nu2265\n\n\n3\n±\nu00b1\n\n\n\n\n\n다음과 같이 사용할 수 있습니다. 여기사 \\는 “escape character”로 뒤에 오는 것이 문자가 아니라 약솓된 결과를 나타내 달라는 뜻입니다.\n\nprint(\"x \\u2264 10\")\n\n[1] \"x ≤ 10\"\n\n\n그럼 어떻게 문자를 사용할까요? print 명령을 위와 같이 사용하는 것도 좋지만, 변수를 생성하기에는 좋은 방법이 따로 있습니다. 좋은 방법이란 처음에는 어렵지만, 알고나면 엄청난 것들을 말합니다. paste와 sprintf 입니다. 어떤 것이 좋은가요?. 우리의 목표가 데이터 표현을 자동화 하는 것인데, 자동화를 위해서는 구조를 만들고 거기에 값을 대입 시키는 것이 기본입니다. 그러니, sprintf 를 더 자주 사용하게 됩니다. paste는 모두 붙여 주는 것이니, 쉽게 이해될 것이고, sprintf는 `%s` 마다 무언가를 넣어 붙여 주는 방식입니다. paste와 sprintf는 정말 자주 사용되는 함수이니 꼭 익숙해 지시기 바랍니다.\n\nxp1 = paste(\"x\", \"\\u2264\", \"10\")\nxp2 = sprintf(\"x %s 10\", \"\\u2264\")\nxp1\n\n[1] \"x ≤ 10\"\n\nxp2\n\n[1] \"x ≤ 10\"\n\n\n\n데이터 확인\n\n데이터의 변수를 확인하는 방법은 colnames() , names() 또는 head()를 하용하는 것입니다. 약 400개의 변수가 있으므로, 처음부터 10번째까지 \\[1:10\\] 변수를 찾아 보겠습니다.\n\ncolnames(kwcs)[1:10]\n\n [1] \"id\"           \"wt\"           \"area\"         \"hh_num\"       \"hm_01_gender\"\n [6] \"hm_01_year\"   \"hm_01_estat\"  \"hm_01_rel_t\"  \"hm_02_gender\" \"hm_02_year\"  \n\n\n그럼 45번째 변수 부터 50번째 변수까지 찾아 보겠습니다. []안을 채워보세요.\n\ncolnames(kwcs)[     ]\n\n\n\n[1] \"target\"      \"YEAR\"        \"ESTAT\"       \"AGE\"         \"country\"    \n[6] \"country_etc\"\n\n\n연령인 AGE가 있네요, 성별에 대한 AGE도 있습니다. 그럼 이것을 이용해서 실습을 해보겠습니다. 변수를 하나 선택하는 것은 데이터에 $ 표시를 하고 이후에 변수를 넣는 방식입니다. “데이터\\(변수\" 입니다. 10개만 보겠습니다. 숫자 처럼 보이네요, 확인하겠습니다. `class(kwcs\\)AGE)`를 이용해봅니다. numberic 으로 숫자입니다. 숫자여야 평균 표준편차 등의 계산이 가능합니다.\n\nkwcs$AGE[1:10]\n\n [1] 54 64 65 57 38 47 54 35 68 69\n\nclass(kwcs$AGE)\n\n[1] \"numeric\"\n\n\n이번에는 SEX 변수(variable)의 변수값(value)를 살펴 보겠습니다. class 가 무엇일까요? double 또는 interger 라고 나올 텐데요, R에서는 numberic 값에 interger와 double 속성을 사용한다고 생각하시면 됩니다. 다만 label을 붙여 놓아서 알기 쉽게 되어 있네요.\n\nkwcs$TSEX[1:10]\n\n<labelled<double>[10]>\n [1] 2 2 2 2 1 2 2 2 2 2\n\nLabels:\n value label\n     1  남성\n     2  여성\n\nclass(kwcs$TSEX)\n\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n\n\n국적에 대해서도 알아보겠습니다. character 이네요. 한국에서 시행한 조사라, 한국 국적은 빈칸으로, 이외에는 국적을 적었습니다. kwcs$country_etc를 해보면, 대부분 빈칸입니다. 빈칸인 경 ==\"\", 빈칸이 아닌 경우 !=\"\"을 이용해서 어떤 국적이 있는지 살펴 보겠습니다.\n\nclass(kwcs$country_etc)\n\n[1] \"character\"\n\nkwcs$country_etc[kwcs$country_etc != \"\"][1:10]\n\n [1] \"베트남\"   \"중국\"     \"캐나다\"   \"중국\"     \"중국\"     \"중국\"    \n [7] \"중국\"     \"파키스탄\" \"중국\"     \"중국\"    \n\n\n근로자의 지위를 알아 보겠습니다. 근로자 지위는 emp_stat 입니다. 1은 상용근로자, 2는 임시근로자, 3은 일용근로자 입니다.\n\nkwcs$emp_stat \n\n\nkwcs$emp_stat %>% head()\n\n<labelled<double>[6]>\n[1]  1  3  1 NA  1  1\n\nLabels:\n value      label\n     1 상용근로자\n     2 임시근로자\n     3 일용근로자\n\n\n매우 중요한 개념이 나옵니다. 빈칸과 NA 입니다. 모두 값에 대한 정보가 없다는 것입니다. 값에 대한 정보가 없으면 어떻게 해야 할지는 매우 중요한 개념입니다. 우선 여기서는 값에 대한 정보가 없는 것을 제외하고 분석해 보겠습니다. 값에 대한 정보가 없는 데이터는 제거하여, 새로운 데이터를 만들겠습니다. 이때 filter 라는 것을 이용합니다. is.na라는 것은 NA라는 것을 의미하고, 앞에 !는 그 반대를 말합니다.\n\nkwcs %>%\n  filter(!is.na(emp_stat))\n\n# A tibble: 27,908 × 459\n      id    wt area      hh_num hm_01…¹ hm_01…² hm_01…³ hm_01…⁴ hm_02_…⁵ hm_02…⁶\n   <dbl> <dbl> <dbl+lbl>  <dbl> <dbl+l>   <dbl> <dbl+l> <dbl+l> <dbl+lb>   <dbl>\n 1     2 0.137 3 [대구]       1 2 [여…    1966 1 [임… 0 [응… NA     …      NA\n 2     3 0.350 3 [대구]       1 2 [여…    1956 1 [임… 0 [응… NA     …      NA\n 3     6 0.156 7 [울산]       1 2 [여…    1955 2 [일… 0 [응… NA     …      NA\n 4     9 0.168 7 [울산]       1 1 [남…    1982 1 [임… 0 [응… NA     …      NA\n 5    10 0.675 6 [대전]       4 2 [여…    1973 1 [임… 0 [응…  1 [남…    1969\n 6    18 2.71  6 [대전]       4 1 [남…    1972 1 [임… 0 [응…  2 [여…    1976\n 7    19 3.83  3 [대구]       5 1 [남…    1969 1 [임… 3 [부…  2 [여…    1971\n 8    20 2.90  3 [대구]       4 1 [남…    1960 1 [임… 3 [부…  2 [여…    1964\n 9    22 2.37  3 [대구]       4 1 [남…    1984 1 [임… 0 [응…  2 [여…    1984\n10    23 2.26  3 [대구]       3 1 [남…    1964 1 [임… 3 [부…  2 [여…    1966\n# … with 27,898 more rows, 449 more variables: hm_02_estat <dbl+lbl>,\n#   hm_02_rel_t <dbl+lbl>, hm_03_gender <dbl+lbl>, hm_03_year <dbl>,\n#   hm_03_estat <dbl+lbl>, hm_03_rel_t <dbl+lbl>, hm_04_gender <dbl+lbl>,\n#   hm_04_year <dbl>, hm_04_estat <dbl+lbl>, hm_04_rel_t <dbl+lbl>,\n#   hm_05_gender <dbl+lbl>, hm_05_year <dbl>, hm_05_estat <dbl+lbl>,\n#   hm_05_rel_t <dbl+lbl>, hm_06_gender <dbl+lbl>, hm_06_year <dbl>,\n#   hm_06_estat <dbl+lbl>, hm_06_rel_t <dbl+lbl>, hm_07_gender <dbl+lbl>, …\n\n\n요통에 대한 변수는 heal_prob1 입니다. 이 변수를 확인해 보겠습니다. 1번은 있다, 2번은 업다, 8번은 무응답, 9번은 거절입니다. 이제 빈칸과 NA가 아니더라도 필요없는 정보가 있습니다. 모르거나/무응답했거나, 거절한 사람입니다. 이를 제거해 보겠습니다.\n\nkwcs %>% \n  filter(!is.na(emp_stat)) %>%\n  filter(!is.na(heal_prob1)) %>%\n  filter(heal_prob1 !=8) %>%\n  filter(heal_prob1 !=9)\n\n이번에는 heal_prob1 에 1, 2 인 사람만 포함시켜 보겠습니다. 어떤 것이 더 편한가요?\n\nkwcs %>% \n  filter(!is.na(emp_stat)) %>%\n  filter(!is.na(heal_prob1)) %>%\n  filter(heal_prob1 %in% c(1, 2))\n\n이번에는 sleep1이라는 변수를 살펴 보겠습니다. sleep1이라는 변수는 잠들기 어려운 것이 매일(1), 한주에 여러번 (2), 한달에 여러번(3), 드물게(5), 전혀 없음(5) 의 5점 척도 입니다. 이데 모름과 거절, 그리고 NA 값을 제거해 보겠습니다.\n그리고 dat라는 새로운 data를 만들고 kwcs를 제거 하겠습니다. dat를 이용해서 분석을 해보겠습니다. 지금까지 사용했던, TSEX, AGE, emp_stat, heal_prob1, sleep1 의 변수를 사용하겠습니다.\n\ndat <- kwcs %>% \n  filter(!is.na(emp_stat)) %>%\n  filter(!is.na(heal_prob1)) %>%\n  filter(heal_prob1 %in% c(1, 2)) %>%\n  filter(sleep1 %in% c(1:5)) %>%\n  select(TSEX, AGE, emp_stat, heal_prob1, sleep1, sleep2, sleep3)\n\n\nrm(kwcs)\n\ndat를 살펴보겠습니다.\n\nhead(dat)\n\n# A tibble: 6 × 7\n  TSEX        AGE emp_stat       heal_prob1 sleep1              sleep2   sleep3 \n  <dbl+lbl> <dbl> <dbl+lbl>      <dbl+lbl>  <dbl+lbl>           <dbl+lb> <dbl+l>\n1 2 [여성]     54 1 [상용근로자] 2 [없다]   5 [전혀없음]        5 [전혀… 5 [전…\n2 2 [여성]     64 3 [일용근로자] 2 [없다]   2 [한 주에 여러 번] 2 [한 … 2 [한 …\n3 2 [여성]     65 1 [상용근로자] 2 [없다]   5 [전혀없음]        5 [전혀… 5 [전…\n4 1 [남성]     38 1 [상용근로자] 2 [없다]   5 [전혀없음]        5 [전혀… 5 [전…\n5 2 [여성]     47 1 [상용근로자] 2 [없다]   5 [전혀없음]        4 [드물… 5 [전…\n6 1 [남성]     48 1 [상용근로자] 1 [있다]   5 [전혀없음]        5 [전혀… 5 [전…"
  },
  {
    "objectID": "245_datamanipulation_for_table.html#central-tendency-mean-median-mode",
    "href": "245_datamanipulation_for_table.html#central-tendency-mean-median-mode",
    "title": "5  Manipulation for table_1",
    "section": "5.3 Central Tendency (mean, median, mode)",
    "text": "5.3 Central Tendency (mean, median, mode)\n대표값중 가장 많이 사용하는 것은 mean 과 median 입니다. 이것을 나타내는 표를 만들어 봅시다. 이것의 평균과 표준 편차를 을 구해 보겠습니다.\n\nmean(dat$AGE)\n\n[1] 44.42325\n\nsd(dat$AGE)\n\n[1] 12.25356\n\n\n이번에는 “tidyverse”를 통해 pipe 코드를 짜 보겠습니다. 데이터를 변형하는 것은 다른 시간에 수행하겠지만, 여기서는 select와 filter, mutate, group_by를 사용하겠습니다. kwcs$TSEX 는 kwcs에서 TSEX를 select하라는 것으로 다름과 같이 사용할 수 있습니다.\n\ndat %>% select(AGE) \n\n# A tibble: 27,891 × 1\n     AGE\n   <dbl>\n 1    54\n 2    64\n 3    65\n 4    38\n 5    47\n 6    48\n 7    23\n 8    28\n 9    36\n10    22\n# … with 27,881 more rows\n\n\n\n5.3.1 하나씩 반복\n이후 이것을 가지고 나와서 (pull), 이어 받고 (.) 평균을 구해보겠습니다. 이후 이것을 mean 과 sd 라는 변수에 assign 하겠습니다.\n\ndat %>% select(AGE) %>% pull(.) %>% mean(.)\n\n[1] 44.42325\n\ndat %>% select(AGE) %>% pull(.) %>% sd(.)\n\n[1] 12.25356\n\ndat %>% select(AGE) %>% pull(.) %>% mean(.) -> mean\ndat %>% select(AGE) %>% pull(.) %>% sd(.)   -> sd\n\n그럼 표현해 볼까요?\n\nmean\n\n[1] 44.42325\n\nsd\n\n[1] 12.25356\n\npaste(\"평균은 \", mean, \"표준편차는 \", sd)\n\n[1] \"평균은  44.4232548133807 표준편차는  12.2535577069047\"\n\n\n보기 불편하네요, 소숫점 2째 자리까지 표현하겠습니다. round를 이용합니다. 더 자세한것은 구글에게 물어 보세요.\n\nmean <- dat %>% select(AGE) %>% pull(.) %>% mean(.) %>% round(., 2) \nsd   <- dat %>% select(AGE) %>% pull(.) %>% sd(.)   %>% round(., 2)\npaste(\"평균은\", mean, \", 표준편차는\", sd)\n\n[1] \"평균은 44.42 , 표준편차는 12.25\"\n\nsprintf(\"평균은 %s, 표준편차는 %s\", mean, sd)\n\n[1] \"평균은 44.42, 표준편차는 12.25\"\n\n\nunicode를 이용해서 약속된 표현을 사용해 보겠습니다.\n\npaste(mean, \"\\u00b1\", sd)\n\n[1] \"44.42 ± 12.25\"\n\nsprintf(\"%s \\u00b1 %s\", mean, sd)\n\n[1] \"44.42 ± 12.25\"\n\n\nsprintf 에서 %s 대신에 %.2f 를 사용할 텐데요, 어떤지 살펴 봅시다. 네 %2.f 라는 것은 소수 2째 자리까지 살려서 표현하는 방식입니다. %.2f 는 어떨까요? 공부하는 방법입니다. 무언가를 더 해보는 것!\n\nsprintf(\"%.2f \\u00b1 %.2f\", mean, sd)\n\n[1] \"44.42 ± 12.25\"\n\n\n그럼 median 을 구해볼까요? 해보세요. 무언가를 해보는 것!\n\ndat %>% pull(AGE) %>% median(.)\n\n[1] 45\n\ndat %>% pull(AGE) %>% quantile(., c(0.5))\n\n50% \n 45 \n\n\n그럼 quantile을 구해볼까요?\n\ndat %>% pull(AGE) %>% quantile(., c(0.25, 0.5, 0.75)) \n\n25% 50% 75% \n 35  45  54 \n\np50 = dat %>% pull(AGE) %>% quantile(., c(0.50))\np25 = dat %>% pull(AGE) %>% quantile(., c(0.25)) \np75 = dat %>% pull(AGE) %>% quantile(., c(0.75)) \nsprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)\n\n[1] \"45 (35-54)\"\n\n\n이것을 남녀를 나누어서 해보겠습니다. filter 명령문을 써보겠습니다. filter(TSEX==1)이라는 것은 TSEX==1 인 남자만을 고르라는 것입니다. 평균은 아래와 같이 구합니다. sd도 구해봅시다.\n\ndat %>% filter(TSEX==1) %>% pull(AGE) %>% mean(.)\n\n[1] 43.65223\n\ndat %>% filter(TSEX==2) %>% pull(AGE) %>% mean(.)\n\n[1] 45.10761\n\n\n\n\n5.3.2 Group_by summary and Table 1\n\nGroup_by\n\n남녀를 나누어서 평균을 구하는 다른 방법을 사용해 봅니다.\n\ndat %>%\n  group_by(TSEX) %>%\n  summarise(avg = mean(AGE), \n            std = sd(AGE))\n\n# A tibble: 2 × 3\n  TSEX        avg   std\n  <dbl+lbl> <dbl> <dbl>\n1 1 [남성]   43.7  12.2\n2 2 [여성]   45.1  12.3\n\n\n동일한 결과가 나오나요. 네 굉장합니다. 남녀를 나누어서 계산했네요. 지금은 2개의 집단을 나누지만, 만약 100개의 집단이라면 filter를 반복하면 어떻게 해야하나요ㅠㅠ. group_by 는 정말 대단한 명령어 입니다. group_by로 코드 파이프 안에서 다음과 같은 결과를 얻었습니다.\n\ndat %>%\n  group_by(TSEX) %>%\n  summarise(avg = mean(AGE), \n            std = sd(AGE)) %>%\n  mutate(smry = sprintf(\"%.2f \\u00b1 %.2f\", avg, std))\n\n# A tibble: 2 × 4\n  TSEX        avg   std smry         \n  <dbl+lbl> <dbl> <dbl> <chr>        \n1 1 [남성]   43.7  12.2 43.65 ± 12.21\n2 2 [여성]   45.1  12.3 45.11 ± 12.25\n\n\n그럼 중간값과 p25-p75를 표현해 봅시다.\n\ndat %>%\n  group_by(TSEX) %>%\n  summarise(avg = mean(AGE), \n            std = sd(AGE), \n            p25 = quantile(AGE, prob=c(0.25)), \n            p50 = quantile(AGE, prob=c(0.50)), \n            p75 = quantile(AGE, prob=c(0.75)), \n            ) %>%\n  mutate(smry1 = sprintf(\"%.1f \\u00b1 %.1f\", avg, std)) %>%\n  mutate(smry2 = sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)) \n\n# A tibble: 2 × 8\n  TSEX        avg   std   p25   p50   p75 smry1       smry2     \n  <dbl+lbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>       <chr>     \n1 1 [남성]   43.7  12.2    34    43    53 43.7 ± 12.2 43 (34-53)\n2 2 [여성]   45.1  12.3    35    46    55 45.1 ± 12.3 46 (35-55)\n\n\n이제 필요한 것만 남겨 보겠습니다.\n\ndat %>%\n  group_by(TSEX) %>%\n  summarise(avg = mean(AGE), \n            std = sd(AGE), \n            p25 = quantile(AGE, prob=c(0.25)), \n            p50 = quantile(AGE, prob=c(0.50)), \n            p75 = quantile(AGE, prob=c(0.75)), \n            ) %>%\n  mutate(smry1 = sprintf(\"%.1f \\u00b1 %.1f\", avg, std)) %>%\n  mutate(smry2 = sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)) %>%\n  select(TSEX, smry1, smry2)\n\n# A tibble: 2 × 3\n  TSEX      smry1       smry2     \n  <dbl+lbl> <chr>       <chr>     \n1 1 [남성]  43.7 ± 12.2 43 (34-53)\n2 2 [여성]  45.1 ± 12.3 46 (35-55)\n\n\n이번에는 같은 내용을 수면에 대해서 해보겠습니다. 수면 점수가 높다믄 것은 잠들기 어렵다는 것이 전혀 없음(5점)에 가깝다는 것입니다. 그러니 역의 점수를 만들겠습니다. 1, 2, 3, 4, 5로 기록된 것을 5, 4, 3, 2, 1로 바꾸고 싶은 것입니다. 아래를 이용할 것입니다.\n\nx= 1:5\ny= 6-x\ny\n\n[1] 5 4 3 2 1\n\n\n\ndat %>%\n  mutate(sleep1in = 6-sleep1)\n\n# A tibble: 27,891 × 8\n   TSEX        AGE emp_stat       heal_prob1 sleep1      sleep2  sleep3  sleep…¹\n   <dbl+lbl> <dbl> <dbl+lbl>      <dbl+lbl>  <dbl+lbl>   <dbl+l> <dbl+l>   <dbl>\n 1 2 [여성]     54 1 [상용근로자] 2 [없다]   5 [전혀없… 5 [전… 5 [전…       1\n 2 2 [여성]     64 3 [일용근로자] 2 [없다]   2 [한 주에… 2 [한 … 2 [한 …       4\n 3 2 [여성]     65 1 [상용근로자] 2 [없다]   5 [전혀없… 5 [전… 5 [전…       1\n 4 1 [남성]     38 1 [상용근로자] 2 [없다]   5 [전혀없… 5 [전… 5 [전…       1\n 5 2 [여성]     47 1 [상용근로자] 2 [없다]   5 [전혀없… 4 [드… 5 [전…       1\n 6 1 [남성]     48 1 [상용근로자] 1 [있다]   5 [전혀없… 5 [전… 5 [전…       1\n 7 1 [남성]     23 2 [임시근로자] 2 [없다]   4 [드물게]… 4 [드… 4 [드…       2\n 8 2 [여성]     28 1 [상용근로자] 2 [없다]   4 [드물게]… 4 [드… 4 [드…       2\n 9 1 [남성]     36 1 [상용근로자] 2 [없다]   4 [드물게]… 4 [드… 4 [드…       2\n10 2 [여성]     22 2 [임시근로자] 2 [없다]   5 [전혀없… 5 [전… 5 [전…       1\n# … with 27,881 more rows, and abbreviated variable name ¹​sleep1in\n\n\n이번에는 mutate을 이용해 새로운 변수를 생성해 보겠습니다. 변형된 dat는 dat1에 할당합니다.\n\ndat1<-dat %>%\n  mutate(sleep1in = 6-sleep1, \n         sleep2in = 6-sleep2, \n         sleep3in = 6-sleep3 \n         ) %>%\n  mutate(sexgp = case_when(\n    TSEX ==1 ~ \"Men\", \n    TRUE ~ \"Women\"\n  ))\n\n이번에는 sexgp를 group으로 하여 성별, 연령의 대표값을 나나타내 봅시다.\n\ndat1 %>%\n  group_by(sexgp) %>%\n  summarise(\n            avg = mean(AGE), \n            std = sd(AGE), \n            p50 = quantile(AGE, prob=c(0.50)), \n            p25 = quantile(AGE, prob=c(0.25)), \n            p75 = quantile(AGE, prob=c(0.75))\n            ) %>%\n  mutate(smry1= sprintf(\"%.1f \\u00b1 %.1f\", avg, std),\n         smry2= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)\n         ) %>%\n    select(sexgp,smry1, smry2)\n\n# A tibble: 2 × 3\n  sexgp smry1       smry2     \n  <chr> <chr>       <chr>     \n1 Men   43.7 ± 12.2 43 (34-53)\n2 Women 45.1 ± 12.3 46 (35-55)\n\n\nhtml Table로 만들면 복사해서 붙여 넣기 매우 편리합니다.\n\ndat1 %>%\n  group_by(TSEX) %>%\n  summarise(\n            avg = mean(AGE), \n            std = sd(AGE), \n            p50 = quantile(AGE, prob=c(0.50)), \n            p25 = quantile(AGE, prob=c(0.25)), \n            p75 = quantile(AGE, prob=c(0.75))\n            ) %>%\n  mutate(smry1= sprintf(\"%.1f \\u00b1 %.1f\", avg, std),\n         smry2= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)\n         ) %>%\n    select(TSEX,smry1, smry2) %>%\n  htmlTable(caption =\"descritive statistics of study population\")\n\n\n\n\n\ndescritive statistics of study population\n\nTSEX\nsmry1\nsmry2\n\n\n\n\n1\n1\n43.7 ± 12.2\n43 (34-53)\n\n\n2\n2\n45.1 ± 12.3\n46 (35-55)\n\n\n\n\n\n그렇다면, sleep1 에 대해서도 만들어 보십시오.\n연령과 sleep1 에 대한 대표값을 함께 볼 수 있을까요? 지금까지 배운 방법으로 해보도록 하겠습니다.\n\ntab1 = dat1 %>%\n  group_by(TSEX) %>%\n  summarise(\n            avg = mean(AGE), \n            std = sd(AGE), \n            p50 = quantile(AGE, prob=c(0.50)), \n            p25 = quantile(AGE, prob=c(0.25)), \n            p75 = quantile(AGE, prob=c(0.75))\n            ) %>%\n  mutate(smry1= sprintf(\"%.1f \\u00b1 %.1f\", avg, std),\n         smry2= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)\n         ) %>%\n    select(TSEX,smry1, smry2) %>%\n  mutate(variable = \"AGE\")\n\n\ntab2 = dat1 %>%\n  group_by(TSEX) %>%\n  summarise(\n            avg = mean(sleep1), \n            std = sd(sleep1), \n            p50 = quantile(sleep1, prob=c(0.50)), \n            p25 = quantile(sleep1, prob=c(0.25)), \n            p75 = quantile(sleep1, prob=c(0.75))\n            ) %>%\n  mutate(smry1= sprintf(\"%.1f \\u00b1 %.1f\", avg, std),\n         smry2= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)\n         ) %>%\n    select(TSEX,smry1, smry2) %>%\n  mutate(variable = \"sleep1\")\n\n이 둘을 합쳐 보겠습니다.\n\nrbind(tab1, tab2)\n\n# A tibble: 4 × 4\n  TSEX      smry1       smry2      variable\n  <dbl+lbl> <chr>       <chr>      <chr>   \n1 1 [남성]  43.7 ± 12.2 43 (34-53) AGE     \n2 2 [여성]  45.1 ± 12.3 46 (35-55) AGE     \n3 1 [남성]  4.5 ± 0.7   5 (4-5)    sleep1  \n4 2 [여성]  4.4 ± 0.8   5 (4-5)    sleep1  \n\n\nsleep1까지 했는데요, sleep2, sleep3 까지 하려면 어떻게 해야 하나요? 이것을 2번더 반복해야 합니다. 만약에 변수가 100개라면 어떻게 해야할까요, 네 1000번 하면됩니다. 좀 익숙한 표를 만들기 위해서 반복하는 것이 가장 기본이 됩니다. 그래도 이제는 이 방법을 응용해서, 컴퓨터가 쉽게 작동하는 방식으로 생각해 보겠습니다.\n\n\n5.3.3 Long File and Table 1\n\nlong file\n\n이제 group 대신에 group이 될 파일을 선택해서 long file로 만들어 보겠습니다. 원하는 파일만 골라 봅니다. 성에 따른 연령, sleep1, 2, 3를 정리해 보겠습니다.\n\ndat1 %>% select(sexgp, AGE, sleep1in, sleep2in, sleep3in)\n\n# A tibble: 27,891 × 5\n   sexgp   AGE sleep1in sleep2in sleep3in\n   <chr> <dbl>    <dbl>    <dbl>    <dbl>\n 1 Women    54        1        1        1\n 2 Women    64        4        4        4\n 3 Women    65        1        1        1\n 4 Men      38        1        1        1\n 5 Women    47        1        2        1\n 6 Men      48        1        1        1\n 7 Men      23        2        2        2\n 8 Women    28        2        2        2\n 9 Men      36        2        2        2\n10 Women    22        1        1        1\n# … with 27,881 more rows\n\n\n이러한 파일을 wide라고 부릅니다. 이제 우리는 TSEX별, AGE와 Sleep1의 값을 얻고자 합니다. 그러면 TSEX와 AGE, TSEX와 Sleep이 하나의 group이 됩니다. group을 반복한것과 같습니다. 즉 group의 기본은 -로 제외하고, 이와 상관되는 변수는 모두 포함하여 variables라는 이름으로 만들고, 값은 values라는 변수로 변환시키는 것입니다.\n\ndat1 %>% select(sexgp, AGE, sleep1in, sleep2in, sleep3in) %>%\n  pivot_longer(-c(sexgp), names_to =\"variables\", values_to = \"values\")\n\n# A tibble: 111,564 × 3\n   sexgp variables values\n   <chr> <chr>      <dbl>\n 1 Women AGE           54\n 2 Women sleep1in       1\n 3 Women sleep2in       1\n 4 Women sleep3in       1\n 5 Women AGE           64\n 6 Women sleep1in       4\n 7 Women sleep2in       4\n 8 Women sleep3in       4\n 9 Women AGE           65\n10 Women sleep1in       1\n# … with 111,554 more rows\n\n\n평균에 대해서만 먼저 해보겠습니다.\n\ndat1%>% select(sexgp, AGE, sleep1, sleep2, sleep3) %>%\n  pivot_longer(-c(sexgp), names_to =\"variables\", values_to = \"values\") %>%\n  group_by(sexgp, variables) %>%\n  summarise(avg = mean(values, na.rm =TRUE), \n            std = sd(values, na.rm =TRUE), \n            p50 = quantile(values, prob = 0.50, na.rm =TRUE),\n            p25 = quantile(values, prob = 0.25, na.rm =TRUE), \n            p75 = quantile(values, prob = 0.75, na.rm =TRUE) \n            ) %>%\n  mutate(mean_std  = sprintf(\"%.1f\\u00b1%.1f\", avg, std), \n         median_IQR= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)) %>%\n  select(sexgp, variables, mean_std)\n\n# A tibble: 8 × 3\n# Groups:   sexgp [2]\n  sexgp variables mean_std \n  <chr> <chr>     <chr>    \n1 Men   AGE       43.7±12.2\n2 Men   sleep1    4.5±0.7  \n3 Men   sleep2    4.5±0.8  \n4 Men   sleep3    4.3±0.9  \n5 Women AGE       45.1±12.3\n6 Women sleep1    4.4±0.8  \n7 Women sleep2    4.4±0.9  \n8 Women sleep3    4.2±0.9  \n\n\n무언가 복잡하지만 쉬워졌죠? 이말에 고개를 끄덕이셨다면 여러분은 이제 R coding에 빠져 들고 있는 것입니다. \n이제 이것을 사람이 보기 편한 상태인 wide로 바꾸겠습니다. pivot_wider를 사용하고 우리가 원하는 가로로 필요한 정보를 names로 하고 원하는 값을 values로 하겠습니다. 이것을 tab1으로 정의하겠습니다.\n\ndat1 %>% select(sexgp, AGE, sleep1, sleep2, sleep3) %>%\n  pivot_longer(-c(sexgp), names_to =\"variables\", values_to = \"values\") %>%\n  group_by(sexgp, variables) %>%\n  summarise(avg = mean(values, na.rm =TRUE), \n            std = sd(values, na.rm =TRUE)\n            ) %>%\n  mutate(mean_std  = sprintf(\"%.1f\\u00b1%.1f\", avg, std), \n         median_IQR= sprintf(\"%.0f (%.0f-%.0f)\", p50, p25, p75)) %>%\n  select(sexgp, variables, mean_std) %>%\n  pivot_wider(names_from = sexgp, values_from = c(mean_std)) -> tab1\ntab1 %>% htmlTable(caption = \"Table 1. Basic Characteristics of study population\")\n\n\n\n\n\nTable 1. Basic Characteristics of study population\n\nvariables\nMen\nWomen\n\n\n\n\n1\nAGE\n43.7±12.2\n45.1±12.3\n\n\n2\nsleep1\n4.5±0.7\n4.4±0.8\n\n\n3\nsleep2\n4.5±0.8\n4.4±0.9\n\n\n4\nsleep3\n4.3±0.9\n4.2±0.9"
  },
  {
    "objectID": "245_datamanipulation_for_table.html#count-and-distribution",
    "href": "245_datamanipulation_for_table.html#count-and-distribution",
    "title": "5  Manipulation for table_1",
    "section": "5.4 Count and Distribution",
    "text": "5.4 Count and Distribution\nheal_prob1 이 요통 변수라고 했었는데요, 1이 요통이 있다. 2가 요통이 없다 입니다. 이것을 표로 만들어 보겠습니다. ### 하나씩 반복 하나씩 반복하는게 가장 기본입니다. count를 사용하겠습니다. 요통이 몇몇 있나요?\n\ndat1 %>% count(heal_prob1)\n\n# A tibble: 2 × 2\n  heal_prob1     n\n  <dbl+lbl>  <int>\n1 1 [있다]    6939\n2 2 [없다]   20952\n\n\n분율, 비율, 유병률을 나타내면 어떻게 될까요. 전체 합을 sum으로 만들고 이때 비율을 만들어야 합니다.\n\ndat1 %>% count(heal_prob1) %>%\n  mutate(total = sum(n)) %>%\n  mutate(prob = n/total)\n\n# A tibble: 2 × 4\n  heal_prob1     n total  prob\n  <dbl+lbl>  <int> <int> <dbl>\n1 1 [있다]    6939 27891 0.249\n2 2 [없다]   20952 27891 0.751\n\n\n남자만 해보겠습니다.\n\ndat1 %>% \n  filter(TSEX==1) %>%\n  count(heal_prob1) %>%\n  mutate(prob= n/sum(n)) \n\n# A tibble: 2 × 3\n  heal_prob1     n  prob\n  <dbl+lbl>  <int> <dbl>\n1 1 [있다]    2930 0.223\n2 2 [없다]   10185 0.777\n\n\n여자만 해보세요.\n\n5.4.1 Group_by summary and Table 1\ngroup_by를 이용해 보겠습니다. 이면 위에서 연령을 이용한 방법을 실습했는데, 그것과 동일합니다\n\ndat1 %>%\n  group_by(TSEX) %>%\n  count(heal_prob1) %>%\n  mutate(prob = n/sum(n))\n\n# A tibble: 4 × 4\n# Groups:   TSEX [2]\n  TSEX      heal_prob1     n  prob\n  <dbl+lbl> <dbl+lbl>  <int> <dbl>\n1 1 [남성]  1 [있다]    2930 0.223\n2 1 [남성]  2 [없다]   10185 0.777\n3 2 [여성]  1 [있다]    4009 0.271\n4 2 [여성]  2 [없다]   10767 0.729\n\n\n익숙한 형태로 표시해 보겠습니다. 그리고 필요한 것만 남겨 보겠습니다 .\n\ndat1 %>%\n  group_by(TSEX) %>%\n  count(heal_prob1) %>%\n  mutate(prob = n/sum(n)) %>%\n  mutate(smry1 = sprintf(\"%s (%.1f%%)\", n, prob*100)) %>%\n  select(TSEX, heal_prob1, smry1)\n\n# A tibble: 4 × 3\n# Groups:   TSEX [2]\n  TSEX      heal_prob1 smry1        \n  <dbl+lbl> <dbl+lbl>  <chr>        \n1 1 [남성]  1 [있다]   2930 (22.3%) \n2 1 [남성]  2 [없다]   10185 (77.7%)\n3 2 [여성]  1 [있다]   4009 (27.1%) \n4 2 [여성]  2 [없다]   10767 (72.9%)\n\n\n이번에는 연령을 5세단위로 바꾸로 각 연령의 분포를 확인해 보겠습니다.\n\ndat1 <-dat1 %>% \n  mutate(agegp = case_when(\n    AGE <25 ~ \"<25\",\n    AGE <30 ~ \"<30\", \n    AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", \n    AGE <45 ~ \"<45\", \n    AGE <50 ~ \"<50\",\n    AGE <55 ~ \"<55\", \n    AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  )) \n\ndat1 %>%\n  group_by(TSEX) %>%\n  count(agegp) %>%\n  mutate(prob = n/sum(n)) %>%\n  mutate(smry1 = sprintf(\"%s (%.1f%%)\", n, prob*100)) %>%\n  select(TSEX, agegp, smry1) %>%\n  arrange(TSEX, agegp)\n\n# A tibble: 18 × 3\n# Groups:   TSEX [2]\n   TSEX      agegp smry1       \n   <dbl+lbl> <chr> <chr>       \n 1 1 [남성]  <25   604 (4.6%)  \n 2 1 [남성]  <30   1334 (10.2%)\n 3 1 [남성]  <35   1498 (11.4%)\n 4 1 [남성]  <40   1812 (13.8%)\n 5 1 [남성]  <45   1810 (13.8%)\n 6 1 [남성]  <50   1691 (12.9%)\n 7 1 [남성]  <55   1464 (11.2%)\n 8 1 [남성]  <60   1323 (10.1%)\n 9 1 [남성]  ≥60   1579 (12.0%)\n10 2 [여성]  <25   727 (4.9%)  \n11 2 [여성]  <30   1242 (8.4%) \n12 2 [여성]  <35   1477 (10.0%)\n13 2 [여성]  <40   1597 (10.8%)\n14 2 [여성]  <45   1730 (11.7%)\n15 2 [여성]  <50   2013 (13.6%)\n16 2 [여성]  <55   2167 (14.7%)\n17 2 [여성]  <60   1972 (13.3%)\n18 2 [여성]  ≥60   1851 (12.5%)\n\n\n\n\n5.4.2 Long File and Table 1\n그럼 이번에는 요통과 연령집단을 동시에 바꾸어 보겠습니다.\n\ndat1 %>%\n  mutate(backpain= case_when(heal_prob1==1 ~ \"pain\", \n                             TRUE ~ \"no-pain\")) %>%\n  select(sexgp, agegp, backpain) %>%\n  pivot_longer(-c(sexgp), names_to =\"variables\", values_to = \"values\")  %>%\n  group_by(sexgp, variables) %>%\n  count(values) %>%\n  mutate(prob = n/sum(n)) %>%\n  mutate(smry1 = sprintf(\"%s (%.1f%%)\", n, prob*100)) %>%\n  select(-n, -prob) %>%\n  pivot_wider(names_from = sexgp, values_from = smry1) -> tab2\n\nhtml 테이블로 살펴 보겠습니다.\n\ntab2 %>% htmlTable()\n\n\n\n\n\nvariables\nvalues\nMen\nWomen\n\n\n\n\n1\nagegp\n<25\n604 (4.6%)\n727 (4.9%)\n\n\n2\nagegp\n<30\n1334 (10.2%)\n1242 (8.4%)\n\n\n3\nagegp\n<35\n1498 (11.4%)\n1477 (10.0%)\n\n\n4\nagegp\n<40\n1812 (13.8%)\n1597 (10.8%)\n\n\n5\nagegp\n<45\n1810 (13.8%)\n1730 (11.7%)\n\n\n6\nagegp\n<50\n1691 (12.9%)\n2013 (13.6%)\n\n\n7\nagegp\n<55\n1464 (11.2%)\n2167 (14.7%)\n\n\n8\nagegp\n<60\n1323 (10.1%)\n1972 (13.3%)\n\n\n9\nagegp\n≥60\n1579 (12.0%)\n1851 (12.5%)\n\n\n10\nbackpain\nno-pain\n10185 (77.7%)\n10767 (72.9%)\n\n\n11\nbackpain\npain\n2930 (22.3%)\n4009 (27.1%)\n\n\n\n\n\n무슨 생각이 드시죠? tab1과 tab2를 합치면 좋겠다는 생각이 드시죠, tab1에는 values 라는 변수가 없습니다 .그래서 합치기 어렵습니다. values 라는 변수를 생성하고 합쳐 보겠습니다.\n\ntab1 = tab1 %>% mutate(values = \"\") %>% select(variables, values, Men, Women) \n\nrbind(tab1, tab2) %>%\n  htmlTable()\n\n\n\n\n\nvariables\nvalues\nMen\nWomen\n\n\n\n\n1\nAGE\n\n43.7±12.2\n45.1±12.3\n\n\n2\nsleep1\n\n4.5±0.7\n4.4±0.8\n\n\n3\nsleep2\n\n4.5±0.8\n4.4±0.9\n\n\n4\nsleep3\n\n4.3±0.9\n4.2±0.9\n\n\n5\nagegp\n<25\n604 (4.6%)\n727 (4.9%)\n\n\n6\nagegp\n<30\n1334 (10.2%)\n1242 (8.4%)\n\n\n7\nagegp\n<35\n1498 (11.4%)\n1477 (10.0%)\n\n\n8\nagegp\n<40\n1812 (13.8%)\n1597 (10.8%)\n\n\n9\nagegp\n<45\n1810 (13.8%)\n1730 (11.7%)\n\n\n10\nagegp\n<50\n1691 (12.9%)\n2013 (13.6%)\n\n\n11\nagegp\n<55\n1464 (11.2%)\n2167 (14.7%)\n\n\n12\nagegp\n<60\n1323 (10.1%)\n1972 (13.3%)\n\n\n13\nagegp\n≥60\n1579 (12.0%)\n1851 (12.5%)\n\n\n14\nbackpain\nno-pain\n10185 (77.7%)\n10767 (72.9%)\n\n\n15\nbackpain\npain\n2930 (22.3%)\n4009 (27.1%)"
  },
  {
    "objectID": "245_datamanipulation_for_table.html#정리-1",
    "href": "245_datamanipulation_for_table.html#정리-1",
    "title": "5  Manipulation for table_1",
    "section": "5.5 정리 1",
    "text": "5.5 정리 1\n\n원하는 데이터를 불러옴\n원하는 변수를 선정\n\n관심 변수 (종속, 독립)\n\n변수 값을 살펴 보기\n\n숫자 인지 아닌지\nmissing value 가 얼마 인지\n제외할 변수가 얼마인지\n\n대표값 생성\n\ncount 함수 사용, prob 변수 생성\n\n표 생성\n\n반복\ngroup_by\nlong file"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#데이터-준비",
    "href": "247_datamanipulation_for_table_2.html#데이터-준비",
    "title": "6  Manipulation for table_2",
    "section": "6.1 데이터 준비",
    "text": "6.1 데이터 준비\n데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다..\n\nrm(list=ls())\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"htmlTable\")) install.packages(\"htmlTable\")\nif(!require(\"haven\")) install.packages(\"haven\")\nif(!require(\"broom\")) install.packages(\"broom\")\n\n데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다.. 데이터를 불러오겠습니다. 안전보건공단 홈페이에서 자료를 다운 받는게 원칙입니다. 다만 실습을 빠르게 진행하기 위해서, dspubs.org 페이지에 있는 파일을 이용하겠습니다.   kwcsData6th.rds   자신의 folder에 data 라는 folder가 있는지 확인하십시오. data라는 폴더에 다운로드하고, 불러오도록 하겠습니다.\n\nurl <- \"https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/kwcsData6th.rds\"\ndownload.file(url, \"data/tutorKWCS.rds\")\nkwcs = readRDS(\"data/tutorKWCS.rds\")"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#분석-주제-선정",
    "href": "247_datamanipulation_for_table_2.html#분석-주제-선정",
    "title": "6  Manipulation for table_2",
    "section": "6.2 분석 주제 선정",
    "text": "6.2 분석 주제 선정\n우선 수면 장애를 중심으로 연구를 하기로 했습니다. 이때 장시간 근무가 수면장애를 일으킬 수 있다는 가정을 했습니다. 기존 연구에서 유사한 내용이 있었기 때문입니다. 그 이유를 생각해보니, 오래 일하면 어떤 방식으로든 수면시간 자체가 줄어들 것으로 보였기 때문입니다. 우선 sleep disturbance, long working hours per week 이 정해졌습니다. 이후 연구방법론의 혼란변수 선정 방법이나, 연구자의 Domain knowledge에 따른 선정, 새로운 가설 개발 (originality) 위한 변수 선정등을 고려할 수 있습니다. 이러한 내용은 각각의 연구방법론 수업에서 학습하시기를 바랍니다.  여러 토론을 하다보니, 일을 마치고 집에 돌아온 후 해야할 일이 많은 경우 수면장애가 발생할 것 같은 느낌이 들었습니다. 이 것을 확인해 보고자 합니다.    즉, 장시간근로와 일과 삶의 균형에 따른 수면장애 관련성을 연구해 보고 싶습니다.\n\n  이제 data manipulation, long wide 변환을 통해 실습을 해보겠습니다.\n\n6.2.1 근로환경조사와 recode (선택사항)\n번외로 분석을 빠르게 진행하기 위해 recode에 대한 복습을 해 보겠습니다. recode는 아주 단순한 변경에 사용되는데요, 근로환경조사는 이미 변수를 1, 2, 3, 4, 5 의 순서를 Likert 척도로 사용하고 있습니다.\n\n근로환경조사 Likert 척도\n\n\n\n\n\n\n\n\n근로환경조사\nLikert 척도\n\n\n\n\n얼마나 자주 그렇습니까(freq)?\n“4.Always”,  “3.Often”, “2.Sometimes”, “1.Rarely”, “0.Never”\n\n\n얼마나 자주 그렇습니까(time)?\n“5.All of the time”, “4.Most of the time”, “3.More than half of the time”, “2.less than half of the time”, “1.Some of the time”, “0.At no time”\n\n\n얼마나 적당 합니까?\n“3.Very well”, “3.Well”, “2.Not very well”, “0.Not at all well”\n\n\n\n이것을 이용하면 매우 쉽게 정리할 수 있습니다. \n\nwwa4: 집안일 때문에 집중하기 어렵다가\n\n1: 항상그렇다,\n2: 대부분그렇다.\n3: 가끔 그렇다\n4: 별로 그렇지 않다.\n5: 전혀 그렇지 않다 로 되어 있습니다.\n\n\n\nrecode\n\n아래의 함수 결과를 살펴보면, 숫자의 경우 순서에 따라 문자를 어사인하는 것을 볼 수 있습니다. 데이터가 정형화되어 정리되어 있는 경우, 그리고 숫자인경우, case_when 이나 ifelse보다 더 쉬운 방법입니다.\n\nvars = c(1, 1, 1, 3, 3, 3, 2, 2, 2, 4, 4, 4)\nr1 = recode(vars, `1`= \"a\", `2`= \"b\", `3`= \"c\", `4`= \"d\")\nr1\n\n [1] \"a\" \"a\" \"a\" \"c\" \"c\" \"c\" \"b\" \"b\" \"b\" \"d\" \"d\" \"d\"\n\nr2 = recode(vars, \"a\", \"b\", \"c\", \"d\")\nr1 == r2\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n문자일 때는 어떨까요? 문자는 순서를 특정화 해주지 않았으므로 어렵습니다. 근로환경조사는 대부분 문자로 저장되어 있습니다.\n\nvars_char = as.character(vars)\nr3 = recode(vars_char, \"a\", \"b\", \"c\", \"d\")\nr3_n = recode(as.numeric(vars_char), \"a\", \"b\", \"c\", \"d\")\n\n이를 as.numeric을 통해 숫자로 변형시켜준 후 시행하면 잘 작동합니다.\n\nvars_char = as.character(vars)\nr3_n = recode(as.numeric(vars_char), \"a\", \"b\", \"c\", \"d\")\n\n이제 kwcs 에서 wwa1부터 wwa5까지를 가져와 역순으로 Likert 척도를 구해보겠습니다.\n\nwwas = kwcs %>% select(TSEX, contains(\"wwa\"))\nwwas %>% head()\n\n# A tibble: 6 × 11\n  TSEX      wwa1     wwa2    wwa3    wwa4    wwa5    wwa1gp wwa2gp wwa3gp wwa4gp\n  <dbl+lbl> <dbl+lb> <dbl+l> <dbl+l> <dbl+l> <dbl+l> <chr>  <chr>  <chr>  <chr> \n1 2 [여성]  5 [전혀… 4 [별… 5 [전… 5 [전… 5 [전… 0.Nev… 1.Rar… 0.Nev… 0.Nev…\n2 2 [여성]  4 [별로… 3 [가… 3 [가… 4 [별… 4 [별… 1.Rar… 2.Som… 2.Som… 1.Rar…\n3 2 [여성]  4 [별로… 4 [별… 4 [별… 4 [별… 4 [별… 1.Rar… 1.Rar… 1.Rar… 1.Rar…\n4 2 [여성]  5 [전혀… 5 [전… 5 [전… 5 [전… 5 [전… 0.Nev… 0.Nev… 0.Nev… 0.Nev…\n5 1 [남성]  5 [전혀… 5 [전… 5 [전… 5 [전… 5 [전… 0.Nev… 0.Nev… 0.Nev… 0.Nev…\n6 2 [여성]  5 [전혀… 4 [별… 4 [별… 5 [전… 5 [전… 0.Nev… 1.Rar… 1.Rar… 0.Nev…\n# … with 1 more variable: wwa5gp <chr>\n\n\nQuizz1: wwa1 변수에서 1의 값을 갖는 것은 남녀 별로 각각 몇명일까요? (script 안에 count 를 이용해서 작성해 보세요)\n\nwwas %>%\n  group_by(TSEX) %>%\n  [ script     ]\n\n이제 recode를 이용해 변환해 보겠습니다.\n\nwwa 관련 변수를\n\n1: 항상그렇다 → “4.Always”\n2: 대부분그렇다 → “3.Often”\n3: 가끔 그렇다 → “2.Sometimes”\n4: 별로 그렇지 않다 → “1.Rarely”\n5: 전혀 그렇지 않다 →“0.Never” 로 변경해 보겠습니다.  첫번째는 case_when으로 두번째는 recode로 변경했습니다. 누가 더 쉬운가요?\n\n\n\ntest = wwas %>%\n  mutate(wwa1gp1 = case_when(\n    wwa1 ==1 ~ \"4.Always\",\n    wwa1 ==2 ~ \"3.Often\", \n    wwa1 ==3 ~ \"2.Sometimes\", \n    wwa1 ==4 ~ \"1.Rarely\",\n    wwa1 ==5 ~ \"0.Never\" \n  )) %>%\n  mutate(wwa1gp2 = recode(as.numeric(wwa1), \n                          \"4.Always\",\"3.Often\",\"2.Sometimes\", \"1.Rarely\",\"0.Never\" \n                          )) \ntest %>%\n  mutate(diff = wwa1gp1 == wwa1gp2) %>%\n  pull(diff) %>% table(.)\n\n.\n TRUE \n41108 \n\n\n코드가 길어지는 것은 누군가와 소통하는데 장벽이 될수 있습니다. 반복적인 것은 함수를 만들어 요약할 수 있습니다.\n\nLikerts = function(x){\n  recode(as.numeric(x), \n         \"4.Always\",\"3.Often\",\"2.Sometimes\", \"1.Rarely\",\"0.Never\" \n         )\n}\n\nwwas %>%\n  mutate(wwa1gp1 = recode(as.numeric(wwa1), \n                          \"4.Always\",\"3.Often\",\"2.Sometimes\", \"1.Rarely\",\"0.Never\" \n                          )) %>%\n  mutate(wwa1gp2 = Likerts(wwa1)) %>%\n  mutate(diff = wwa1gp1 == wwa1gp2) %>%\n  pull(diff) %>% table(.)\n\n.\n TRUE \n41108 \n\n\n\n\n6.2.2 근로환경조사 기본 변수 생성\ndata manipulation에서 실습한 내용을 통해 변수를 생성해 보겠습니다.\n\n# data manip function\nLikert5f = function(x){dplyr::recode(as.numeric(x), \n         \"4.Always\",\"3.Often\",\"2.Sometimes\", \"1.Rarely\",\"0.Never\" )}\n\n# data step start ----------\n\ndat1 = kwcs %>%\n  filter(AGE <70) %>%\n  filter(AGE >18) %>%\n  # sleep --------\n  filter(!is.na(sleep1)&!is.na(sleep2)&!is.na(sleep3)) %>%\n  filter(sleep1 %in% c(1:5), \n         sleep2 %in% c(1:5), \n         sleep3 %in% c(1:5)) %>%\n  mutate(sleep1in = 5-sleep1, \n         sleep2in = 5-sleep2,\n         sleep3in = 5-sleep3\n         ) %>%\n  mutate(sleepgp = case_when(\n    sleep1in + sleep2in+ sleep3in >=6 ~ \"1.sleep disturbance\", \n    TRUE ~ \"0.non distrubance\"\n  )) %>%\n  # work life balances -------------\n  filter(!is.na(wbalance), !is.na(wwa1), !is.na(wwa2), !is.na(wwa3), !is.na(wwa4), !is.na(wwa5)) %>%\n  filter(!is.na(wbalance)) %>%\n  mutate(wbalancegp = case_when(\n    wbalance %in% c(1, 2) ~ \"0.balance\", \n    TRUE ~ \"1.non balance\"\n  )) %>%\n  mutate(wwa1gp=Likert5f(wwa1), wwa2gp=Likert5f(wwa2),  wwa3gp=Likert5f(wwa3), \n         wwa4gp=Likert5f(wwa4), wwa5gp=Likert5f(wwa5), \n         ) %>%\n  # job and sex, agegp  ----------\n  filter(!is.na(job1))%>%\n  filter(job1 %in% c(1, 2, 3)) %>%\n  mutate(sexgp = case_when(\n    TSEX ==1 ~ \"Men\", \n    TRUE ~ \"Women\"\n  )) %>%\n  mutate(agegp = case_when(AGE <25 ~ \"<25\", AGE <30 ~ \"<30\",  AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", AGE <45 ~ \"<45\", AGE <50 ~ \"<50\",AGE <55 ~ \"<55\", AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  )) %>%\n  filter(!is.na(edu)) %>% filter(edu %in% c(1:7)) %>%\n  mutate(edugp = case_when(\n    edu %in% c(1:3) ~    \"2.middle school or below\",\n    edu %in% c(4  ) ~    \"1.high school\",\n    edu %in% c(5:7)   ~  \"0.university or more\"\n  )) %>%\n  mutate(njob=case_when(\n    job1 %in% c(2, 3) ~ \"1.njob\", \n    TRUE ~ \"0.one-job\")) %>%\n  # back pains -----------\n  mutate(backpain= case_when(\n    heal_prob1==1 ~ \"pain\", \n    TRUE ~ \"no-pain\")) %>%\n  # emp_type,working hours, shiftwork, work life balance -------\n  filter(!is.na(emp_type)) %>%\n  filter(emp_type %in% c(1:4)) %>%\n  mutate(empgp = case_when(\n    emp_type ==1 ~ \"2.own-account worker\", \n    emp_type ==2 ~ \"1.employer/self-employer\", \n    emp_type ==3 ~ \"0.paid-worker\", \n    emp_type ==4 ~ \"3.unpaind family work\"\n  )) %>%\n  filter(!is.na(wtime_week)) %>%\n  mutate(whgp=case_when(\n    wtime_week < 35 ~ \"<35\", \n    wtime_week < 40 ~ \"<40\", \n    wtime_week < 52 ~ \"<52\", \n    wtime_week < 60 ~ \"<60\", \n    TRUE ~ \"\\u226560\", \n  )) %>%\n  filter(!is.na(wtime_length5)) %>%\n  filter(wtime_length5 %in% c(1, 2)) %>%\n  mutate(shiftWork = case_when(\n    wtime_length5 ==1 ~ \"1.shift work\", \n    TRUE ~ \"0.non shift work\"\n  )) %>%\n  filter(!is.na(wtime_resilience)) %>%\n  mutate(shortReturn = case_when(\n    wtime_resilience ==1 ~ \"1.short return\", \n    TRUE ~ \"0.non short return\"\n  )) %>%\n  filter(!is.na(satisfaction)) %>%\n  filter(satisfaction %in% c(1:4)) %>%\n  mutate(satisInv = 5-satisfaction) %>%\n  mutate(shiftShort=case_when(\n    shiftWork == \"1.shift work\" & shortReturn == \"1.short return\" ~ \"3.shift work with short return\", \n    shiftWork == \"1.shift work\" & shortReturn != \"1.short return\" ~ \"2.shift work\", \n    shiftWork != \"1.shift work\" & shortReturn == \"1.short return\" ~ \"1.day work with short return\", \n    shiftWork != \"1.shift work\" & shortReturn != \"1.short return\" ~ \"0.day work\", \n  ))"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#근로환경조사-table-1-만들기",
    "href": "247_datamanipulation_for_table_2.html#근로환경조사-table-1-만들기",
    "title": "6  Manipulation for table_2",
    "section": "6.3 근로환경조사 Table 1 만들기",
    "text": "6.3 근로환경조사 Table 1 만들기\n지금까지 작업을 통해 분석한 변수를 선정합니다. 이때 정리할 부분은 무엇으로 구분할지, 관심변수는 무엇인지 이중 명목변수와 연속변수는 무엇인지를 구분하는 것입니다.\n\n## Variables selection\nstratas  = c(\"sleepgp\")\ncatVars = c(\n  # interesting\n  #\"wbalancegp\",\n  \"wwa1gp\", \"wwa2gp\",\"wwa3gp\",\"wwa4gp\",\"wwa5gp\",\n  # confounder\n  #\"whgp\", \n  \"shortReturn\",#\"shiftWork\" , #\"njob\", \n  # demograhpics\n  \"sexgp\", #\"agegp\", \n  \"edugp\", \"empgp\" #, \"backpain\" \n)\nconVars = c(\"AGE\",\"satisfaction\")\n\n\n6.3.1 변수 값 요약하기\n아래 코드가 뜻하는 것은 무엇일까요? 하나하나 살펴보아야 합니다. Table을 만들때 long file 형태로 만든 것입니다.\n\ncatTab = dat1 %>%\n  select(stratas, all_of(catVars)) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by( variables, values) %>%\n  count(!!sym(stratas)) %>%\n  mutate(prob = n/sum(n), \n         smry= sprintf(\"%.0f (%.1f%%)\", n, prob*100)\n         ) %>%\n  select(-n, -prob) %>%\n  ungroup() %>%\n  pivot_wider(names_from = stratas, values_from =smry) \n\n아래 코드가 뜻하는 것은 무엇일까요? 하나하나 살펴보아야 합니다. Table을 만들때 long file 형태로 만든 것입니다.\n\nconTab = \n  dat1 %>%\n  select(stratas, all_of(conVars)) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by( !!sym(stratas), variables) %>%\n  summarise(avg = mean(values, na.rm =TRUE), \n            std = sd(values, na.rm =TRUE) \n            ) %>%\n  mutate(smry  = sprintf(\"%.1f\\u00b1%.1f\", avg, std)) %>%\n  select(stratas, variables, smry)%>%\n  ungroup() %>%\n  pivot_wider(names_from = stratas, values_from =smry) %>%\n  mutate(values =\"\") \n\n명목변수 요약 표 catTab과 연속편수 요약표 conTab을 합쳐 보겠습니다. rbind는 종으로 합친다는 뜻입니다.\n\ntabDat = rbind(catTab, conTab)\n\n\n\n6.3.2 P value 구하기.\n이제 P value를 구해보겠습니다. 명목변수는 카이검정, 연속변수는 T검정을 해보겠습니다.\n\nChisq-Test\n\nCross Table을 만든 다음, chisq.test() 명령을 통해 수행합니다.\n\ntab= data.frame(A = c(1000, 2000), \n           B = c(100,  300))\ntab\n\n     A   B\n1 1000 100\n2 2000 300\n\nchisq.test(tab)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  tab\nX-squared = 10.821, df = 1, p-value = 0.001003\n\n\n\nT.Test\n\n두 연속변수로 구성된 Data를 만들고 t.test() 명령을 통해 수행합니다.\n\ntab = data.frame(A=rnorm(100), \n           B=rnorm(100)+0.3)\nt.test(tab)\n\n\n    One Sample t-test\n\ndata:  tab\nt = 1.9231, df = 199, p-value = 0.0559\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n -0.003545998  0.282425841\nsample estimates:\nmean of x \n0.1394399 \n\n\n이것을 이용해서 카이검정과 T검정을 수행해보겠습니다.  가장 정확하면서 쉬운 방식은 반복하는 것입니다. 우리가 이미 변수 값을 long file을 통해 정리하는 것을 실습하였기 때문에, 이 방식도 long file을 이용하겠습니다. \n이때 중요한 개념임 map, nest, tidy가 나옵니다. \n\nmap, nest, tidy\n\n각 백터 값에 대해서 함수를 실행한다.\n\n1:5 %>%\n  map(function(x){x^2})\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 16\n\n[[5]]\n[1] 25\n\ntibble(a=1:5, b=6:10) %>%\n  map(sum)\n\n$a\n[1] 15\n\n$b\n[1] 40\n\n\n이번에는 좀 복잡한 것을 해보겠습니다 아래와 같이 두 집단에 대해서 size와 power를 각 20명에게 측정했다고 가정합시다. 그리고 size와 power를 동시에 측정하고 측정 순서대로 데이터를 정리한 것입니다. 이후 G1과 G2의 Size와 Power에 대해 T.test를 수행하겠습니다.\n\ntest = tibble(\n  Variables= rep(c(\"Size\",\"Power\"), each=20), \n  G1= c(rnorm(20), rnorm(20)), \n  G2= c(rnorm(20)-0.3, rnorm(20)+0.3), \n  )\n\n일반적 방식은 아래와 같습니다. 이것을 반복하면 되는 것입니다.\n\ntest %>% filter(Variables==\"Size\") %>%\n  select(-Variables) %>%\n  t.test(.)\n\n\n    One Sample t-test\n\ndata:  .\nt = -0.34844, df = 39, p-value = 0.7294\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n -0.4317298  0.3048426\nsample estimates:\n  mean of x \n-0.06344356 \n\nt.test(test[test$Variables==\"Size\", ]$G1, \n  test[test$Variables==\"Size\", ]$G2)\n\n\n    Welch Two Sample t-test\n\ndata:  test[test$Variables == \"Size\", ]$G1 and test[test$Variables == \"Size\", ]$G2\nt = 1.388, df = 37.619, p-value = 0.1733\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.2292866  1.2283757\nsample estimates:\n mean of x  mean of y \n 0.1863287 -0.3132158 \n\n\n이에 이것을 반복 수행하기 위해, data를 slice 하여 하나의 list로 만드는과정을 하겠습니다. nest의 과정입니다. 이후 각 데이터에 map을 이용해서 반복 수행을 하겠습니다. 그리고 그 값을 정리하여 unnest하는 과정이 필요합니다. 필요한 값인 p. value만 남겨 정리합니다.\n\ntest1 = test %>%\n  nest(dat = -Variables) %>%\n  mutate(fit=map(dat, ~t.test(.x)), \n         tidied=map(fit, tidy)) \ntest1 %>% unnest(tidied) %>%\n  select(Variables, p.value)\n\n# A tibble: 2 × 2\n  Variables p.value\n  <chr>       <dbl>\n1 Size        0.729\n2 Power       0.135\n\n\n지금까지 사용한 것을 가지고, 명목변수에서는 Chisq-Test, 연속변수에서 t.test 를 수행하여 정리하겠습니다.\n\n명목변수, chisq.test\n\n\ncatPvalue = \n  dat1 %>%\n  select(stratas, catVars) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by(variables, values) %>%\n  count(!!sym(stratas)) %>%\n  pivot_wider(names_from = stratas, values_from =n) %>%\n  ungroup() %>%\n  select(-values) %>%\n  nest(dat = -variables) %>%\n  mutate(\n    fit = map(dat, \n              ~chisq.test(.x)), \n    tidied = map(fit, tidy)\n  ) %>%\n  unnest(tidied) %>%\n  select(variables, p.value) %>%\n  mutate(p.value = ifelse(p.value <0.001, \"<0.001\", sprintf(\"%.3f\", p.value)))\n\n\n연속변수, t.test\n\n\nconPvalue=dat1 %>%\n  mutate(stratas = !!sym(stratas)) %>%\n  select(stratas, conVars) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\") %>%\n  nest(dat = -variables) %>%\n  mutate(\n    fit   =map(dat, ~t.test(.$values ~ .$stratas)), \n    tidied=map(fit, tidy)\n  ) %>%\n  unnest(tidied) %>%\n  select(variables, p.value) %>%\n  mutate(p.value = ifelse(p.value <0.001, \"<0.001\", sprintf(\"%.3f\", p.value)))\n\n\nP.valeu 합치기\n\n\ntabPvalue = rbind(catPvalue, conPvalue)\n\n\n표가 어떤 순서대로 표현될지에 대한 순서를 정합니다.\n\n\nvarOrder = tibble(\"variables\"=c(catVars, conVars)) %>%\n  mutate(order = row_number())\nvarOrder\n\n# A tibble: 11 × 2\n   variables    order\n   <chr>        <int>\n 1 wwa1gp           1\n 2 wwa2gp           2\n 3 wwa3gp           3\n 4 wwa4gp           4\n 5 wwa5gp           5\n 6 shortReturn      6\n 7 sexgp            7\n 8 edugp            8\n 9 empgp            9\n10 AGE             10\n11 satisfaction    11"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#table-1-정리하기",
    "href": "247_datamanipulation_for_table_2.html#table-1-정리하기",
    "title": "6  Manipulation for table_2",
    "section": "6.4 Table 1 정리하기",
    "text": "6.4 Table 1 정리하기\n이제 변수값 요약과, p.value를 합치고, 순서에 맞게 정리하겠습니다.\n\ntab1 = tabDat %>%\n  left_join(tabPvalue, by=c(\"variables\")) %>%\n  left_join(varOrder, by = c(\"variables\")) %>%\n  arrange(order, values) %>%\n  group_by(variables) %>%\n  mutate(ranks = row_number()) %>%\n  mutate(p.value   = ifelse(ranks==min(ranks), p.value,   \"\")) %>% \n  mutate(variables = ifelse(ranks==min(ranks), variables, \"\")) %>%\n  ungroup() %>%\n  select(-order, -ranks)%>%\n  mutate(values = str_replace(values, \"[:digit:]\\\\.\", \"\"))\n\n이것을 htmlTable로 나타내면 다음과 같습니다.\n\ntab1 %>% htmlTable()\n\n\n\n\n\nvariables\nvalues\n0.non distrubance\n1.sleep disturbance\np.value\n\n\n\n\n1\nwwa1gp\nNever\n12222 (94.7%)\n684 (5.3%)\n<0.001\n\n\n2\n\nRarely\n12316 (94.5%)\n714 (5.5%)\n\n\n\n3\n\nSometimes\n9112 (90.3%)\n981 (9.7%)\n\n\n\n4\n\nOften\n3456 (82.8%)\n717 (17.2%)\n\n\n\n5\n\nAlways\n634 (70.0%)\n272 (30.0%)\n\n\n\n6\nwwa2gp\nNever\n12432 (95.4%)\n597 (4.6%)\n<0.001\n\n\n7\n\nRarely\n13682 (94.1%)\n863 (5.9%)\n\n\n\n8\n\nSometimes\n8882 (89.2%)\n1072 (10.8%)\n\n\n\n9\n\nOften\n2460 (79.4%)\n638 (20.6%)\n\n\n\n10\n\nAlways\n284 (58.9%)\n198 (41.1%)\n\n\n\n11\nwwa3gp\nNever\n13472 (95.2%)\n682 (4.8%)\n<0.001\n\n\n12\n\nRarely\n13938 (93.1%)\n1040 (6.9%)\n\n\n\n13\n\nSometimes\n7749 (89.9%)\n868 (10.1%)\n\n\n\n14\n\nOften\n2314 (79.5%)\n597 (20.5%)\n\n\n\n15\n\nAlways\n267 (59.6%)\n181 (40.4%)\n\n\n\n16\nwwa4gp\nNever\n18708 (94.1%)\n1169 (5.9%)\n<0.001\n\n\n17\n\nRarely\n14799 (91.6%)\n1362 (8.4%)\n\n\n\n18\n\nSometimes\n3348 (85.0%)\n592 (15.0%)\n\n\n\n19\n\nOften\n805 (80.7%)\n193 (19.3%)\n\n\n\n20\n\nAlways\n80 (60.6%)\n52 (39.4%)\n\n\n\n21\nwwa5gp\nNever\n19061 (93.9%)\n1245 (6.1%)\n<0.001\n\n\n22\n\nRarely\n14770 (91.6%)\n1349 (8.4%)\n\n\n\n23\n\nSometimes\n3180 (85.3%)\n550 (14.7%)\n\n\n\n24\n\nOften\n682 (79.8%)\n173 (20.2%)\n\n\n\n25\n\nAlways\n47 (48.0%)\n51 (52.0%)\n\n\n\n26\nshortReturn\nnon short return\n36183 (92.5%)\n2927 (7.5%)\n<0.001\n\n\n27\n\nshort return\n1557 (77.9%)\n441 (22.1%)\n\n\n\n28\nsexgp\nMen\n17892 (93.1%)\n1327 (6.9%)\n<0.001\n\n\n29\n\nWomen\n19848 (90.7%)\n2041 (9.3%)\n\n\n\n30\nedugp\nuniversity or more\n19597 (92.9%)\n1502 (7.1%)\n<0.001\n\n\n31\n\nhigh school\n14943 (91.9%)\n1318 (8.1%)\n\n\n\n32\n\nmiddle school or below\n3200 (85.4%)\n548 (14.6%)\n\n\n\n33\nempgp\npaid-worker\n25786 (92.4%)\n2122 (7.6%)\n<0.001\n\n\n34\n\nemployer/self-employer\n2539 (91.7%)\n229 (8.3%)\n\n\n\n35\n\nown-account worker\n8359 (90.5%)\n880 (9.5%)\n\n\n\n36\n\nunpaind family work\n1056 (88.5%)\n137 (11.5%)\n\n\n\n37\nAGE\n\n46.8±12.4\n49.7±11.9\n<0.001\n\n\n38\nsatisfaction\n\n2.1±0.5\n2.4±0.6\n<0.001\n\n\n\n\n\n\n6.4.1 htmlTable visulaization\n테이블이 너무 길기 때문에, wwa2, wwa3, wwa4, wwa5, 는 제외하고 표를 만들겠습니다.\n\ntab2 = tab1 %>% slice(-c(6:25))\ntab2 %>% \n  `rownames<-`(NULL)  %>%\n  htmlTable(rnames = FALSE) \n\n\n\n\n\nvariables\nvalues\n0.non distrubance\n1.sleep disturbance\np.value\n\n\n\n\nwwa1gp\nNever\n12222 (94.7%)\n684 (5.3%)\n<0.001\n\n\n\nRarely\n12316 (94.5%)\n714 (5.5%)\n\n\n\n\nSometimes\n9112 (90.3%)\n981 (9.7%)\n\n\n\n\nOften\n3456 (82.8%)\n717 (17.2%)\n\n\n\n\nAlways\n634 (70.0%)\n272 (30.0%)\n\n\n\nshortReturn\nnon short return\n36183 (92.5%)\n2927 (7.5%)\n<0.001\n\n\n\nshort return\n1557 (77.9%)\n441 (22.1%)\n\n\n\nsexgp\nMen\n17892 (93.1%)\n1327 (6.9%)\n<0.001\n\n\n\nWomen\n19848 (90.7%)\n2041 (9.3%)\n\n\n\nedugp\nuniversity or more\n19597 (92.9%)\n1502 (7.1%)\n<0.001\n\n\n\nhigh school\n14943 (91.9%)\n1318 (8.1%)\n\n\n\n\nmiddle school or below\n3200 (85.4%)\n548 (14.6%)\n\n\n\nempgp\npaid-worker\n25786 (92.4%)\n2122 (7.6%)\n<0.001\n\n\n\nemployer/self-employer\n2539 (91.7%)\n229 (8.3%)\n\n\n\n\nown-account worker\n8359 (90.5%)\n880 (9.5%)\n\n\n\n\nunpaind family work\n1056 (88.5%)\n137 (11.5%)\n\n\n\nAGE\n\n46.8±12.4\n49.7±11.9\n<0.001\n\n\nsatisfaction\n\n2.1±0.5\n2.4±0.6\n<0.001\n\n\n\n\n\n변수 이름을 변경하요 보기 좋게 변환시키고, cgroup을 이용하여 colum 부분을 조정합니다. Caption과 Footer를 작성하여 마무리 합니다.\n\ntab2 %>%\n  setNames(c(\"\", \"\", \"None\", \"Disturbance\", \"P value\")) %>%\n  htmlTable(\n    cgroup = c(\"\",  \"Sleep disturbance\", \"\"), \n    n.cgroup = c(2, 2, 1), \n    tfoot = \"P value calculated by Chisq-Test and T-Test\", \n    rnames = FALSE, \n    caption = \"Basic Characteristics according to Sleep disturbance\"\n  ) \n\n\n\n\n\nBasic Characteristics according to Sleep disturbance\n\n \nSleep disturbance \n\n\n\n\n \n \nNone\nDisturbance \n \nP value\n\n\n\n\nwwa1gp\nNever \n \n12222 (94.7%)\n684 (5.3%) \n \n<0.001\n\n\n\nRarely \n \n12316 (94.5%)\n714 (5.5%) \n \n\n\n\n\nSometimes \n \n9112 (90.3%)\n981 (9.7%) \n \n\n\n\n\nOften \n \n3456 (82.8%)\n717 (17.2%) \n \n\n\n\n\nAlways \n \n634 (70.0%)\n272 (30.0%) \n \n\n\n\nshortReturn\nnon short return \n \n36183 (92.5%)\n2927 (7.5%) \n \n<0.001\n\n\n\nshort return \n \n1557 (77.9%)\n441 (22.1%) \n \n\n\n\nsexgp\nMen \n \n17892 (93.1%)\n1327 (6.9%) \n \n<0.001\n\n\n\nWomen \n \n19848 (90.7%)\n2041 (9.3%) \n \n\n\n\nedugp\nuniversity or more \n \n19597 (92.9%)\n1502 (7.1%) \n \n<0.001\n\n\n\nhigh school \n \n14943 (91.9%)\n1318 (8.1%) \n \n\n\n\n\nmiddle school or below \n \n3200 (85.4%)\n548 (14.6%) \n \n\n\n\nempgp\npaid-worker \n \n25786 (92.4%)\n2122 (7.6%) \n \n<0.001\n\n\n\nemployer/self-employer \n \n2539 (91.7%)\n229 (8.3%) \n \n\n\n\n\nown-account worker \n \n8359 (90.5%)\n880 (9.5%) \n \n\n\n\n\nunpaind family work \n \n1056 (88.5%)\n137 (11.5%) \n \n\n\n\nAGE\n \n \n46.8±12.4\n49.7±11.9 \n \n<0.001\n\n\nsatisfaction\n \n \n2.1±0.5\n2.4±0.6 \n \n<0.001\n\n\n\nP value calculated by Chisq-Test and T-Test"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#kwcsfunction",
    "href": "247_datamanipulation_for_table_2.html#kwcsfunction",
    "title": "6  Manipulation for table_2",
    "section": "6.5 함수만들기",
    "text": "6.5 함수만들기\n지금가지 했던 일련의 과정을 함수로 정리하겠습니다.\n\nkwcsTabf = function(dat1, stratas, catVars, conVars){\nvarOrder = tibble(\"variables\"=c(catVars, conVars)) %>%\n  mutate(order = row_number())\n  \ncatTab = dat1 %>%\n  select(stratas, all_of(catVars)) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by( variables, values) %>%\n  count(!!sym(stratas)) %>%\n  mutate(prob = n/sum(n), \n         smry= sprintf(\"%.0f (%.1f%%)\", n, prob*100)\n  ) %>%\n  select(-n, -prob) %>%\n  ungroup() %>%\n  pivot_wider(names_from = stratas, values_from =smry) \n\nconTab = \n  dat1 %>%\n  select(stratas, all_of(conVars)) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by( !!sym(stratas), variables) %>%\n  summarise(avg = mean(values, na.rm =TRUE), \n            std = sd(values, na.rm =TRUE) \n  ) %>%\n  mutate(smry  = sprintf(\"%.1f\\u00b1%.1f\", avg, std)) %>%\n  select(stratas, variables, smry)%>%\n  ungroup() %>%\n  pivot_wider(names_from = stratas, values_from =smry) %>%\n  mutate(values =\"\") \ntabDat = rbind(catTab, conTab)\n\n\ncatPvalue = \n  dat1 %>%\n  select(stratas, catVars) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\")%>%\n  group_by(variables, values) %>%\n  count(!!sym(stratas)) %>%\n  pivot_wider(names_from = stratas, values_from =n) %>%\n  ungroup() %>%\n  select(-values) %>%\n  nest(dat = -variables) %>%\n  mutate(\n    fit = map(dat, \n              ~chisq.test(.x)), \n    tidied = map(fit, tidy)\n  ) %>%\n  unnest(tidied) %>%\n  select(variables, p.value) %>%\n  mutate(p.value = ifelse(p.value <0.001, \"<0.001\", sprintf(\"%.3f\", p.value)))\n\nconPvalue=dat1 %>%\n  mutate(stratas = !!sym(stratas)) %>%\n  select(stratas, conVars) %>%\n  pivot_longer(-c(stratas), names_to = \"variables\", values_to =\"values\") %>%\n  nest(dat = -variables) %>%\n  mutate(\n    fit   =map(dat, ~t.test(.$values ~ .$stratas)), \n    tidied=map(fit, tidy)\n  ) %>%\n  unnest(tidied) %>%\n  select(variables, p.value) %>%\n  mutate(p.value = ifelse(p.value <0.001, \"<0.001\", sprintf(\"%.3f\", p.value)))\n\ntabPvalue = rbind(catPvalue, conPvalue)\n\ntab1 = tabDat %>%\n  left_join(tabPvalue, by=c(\"variables\")) %>%\n  left_join(varOrder, by = c(\"variables\")) %>%\n  arrange(order, values) %>%\n  group_by(variables) %>%\n  mutate(ranks = row_number()) %>%\n  mutate(p.value   = ifelse(ranks==min(ranks), p.value,   \"\")) %>% \n  mutate(variables = ifelse(ranks==min(ranks), variables, \"\")) %>%\n  ungroup() %>%\n  select(-order, -ranks)%>%\n  mutate(values = str_replace(values, \"[:digit:]\\\\.\", \"\"))\nreturn(tab1)\n}\n\n층화변수, 명목변수, 연속변수를 구성하여 함수를 실행해 보겠습니다.\n\n## Variables selection\nstratas  = c(\"sleepgp\")\ncatVars = c(\n  # interesting\n  #\"wbalancegp\",\n  \"wwa1gp\", \"wwa2gp\",\"wwa3gp\",\"wwa4gp\",\"wwa5gp\",\n  # confounder\n  #\"whgp\", \n  \"shortReturn\",\"shiftWork\" , \"njob\", \n  # demograhpics\n  \"sexgp\", \"agegp\", \n  \"edugp\", \"empgp\" #, backpain\" \n)\nconVars = c(\"AGE\",\"satisfaction\")\n\ntab1 = kwcsTabf(dat1=dat1, stratas = stratas, catVars = catVars, conVars = conVars)\ntab1 %>% \n  setNames(c(\"\", \"\", \"None\", \"Disturbance\", \"P value\")) %>%\n  htmlTable(\n    cgroup = c(\"\",  \"Sleep disturbance\", \"\"), \n    n.cgroup = c(2, 2, 1), \n    tfoot = \"P value calculated by Chisq-Test and T-Test\", \n    rnames = FALSE, \n    caption = \"Basic Characteristics according to Sleep disturbance\"\n  ) \n\n\n\n\n\nBasic Characteristics according to Sleep disturbance\n\n \nSleep disturbance \n\n\n\n\n \n \nNone\nDisturbance \n \nP value\n\n\n\n\nwwa1gp\nNever \n \n12222 (94.7%)\n684 (5.3%) \n \n<0.001\n\n\n\nRarely \n \n12316 (94.5%)\n714 (5.5%) \n \n\n\n\n\nSometimes \n \n9112 (90.3%)\n981 (9.7%) \n \n\n\n\n\nOften \n \n3456 (82.8%)\n717 (17.2%) \n \n\n\n\n\nAlways \n \n634 (70.0%)\n272 (30.0%) \n \n\n\n\nwwa2gp\nNever \n \n12432 (95.4%)\n597 (4.6%) \n \n<0.001\n\n\n\nRarely \n \n13682 (94.1%)\n863 (5.9%) \n \n\n\n\n\nSometimes \n \n8882 (89.2%)\n1072 (10.8%) \n \n\n\n\n\nOften \n \n2460 (79.4%)\n638 (20.6%) \n \n\n\n\n\nAlways \n \n284 (58.9%)\n198 (41.1%) \n \n\n\n\nwwa3gp\nNever \n \n13472 (95.2%)\n682 (4.8%) \n \n<0.001\n\n\n\nRarely \n \n13938 (93.1%)\n1040 (6.9%) \n \n\n\n\n\nSometimes \n \n7749 (89.9%)\n868 (10.1%) \n \n\n\n\n\nOften \n \n2314 (79.5%)\n597 (20.5%) \n \n\n\n\n\nAlways \n \n267 (59.6%)\n181 (40.4%) \n \n\n\n\nwwa4gp\nNever \n \n18708 (94.1%)\n1169 (5.9%) \n \n<0.001\n\n\n\nRarely \n \n14799 (91.6%)\n1362 (8.4%) \n \n\n\n\n\nSometimes \n \n3348 (85.0%)\n592 (15.0%) \n \n\n\n\n\nOften \n \n805 (80.7%)\n193 (19.3%) \n \n\n\n\n\nAlways \n \n80 (60.6%)\n52 (39.4%) \n \n\n\n\nwwa5gp\nNever \n \n19061 (93.9%)\n1245 (6.1%) \n \n<0.001\n\n\n\nRarely \n \n14770 (91.6%)\n1349 (8.4%) \n \n\n\n\n\nSometimes \n \n3180 (85.3%)\n550 (14.7%) \n \n\n\n\n\nOften \n \n682 (79.8%)\n173 (20.2%) \n \n\n\n\n\nAlways \n \n47 (48.0%)\n51 (52.0%) \n \n\n\n\nshortReturn\nnon short return \n \n36183 (92.5%)\n2927 (7.5%) \n \n<0.001\n\n\n\nshort return \n \n1557 (77.9%)\n441 (22.1%) \n \n\n\n\nshiftWork\nnon shift work \n \n35056 (91.9%)\n3073 (8.1%) \n \n<0.001\n\n\n\nshift work \n \n2684 (90.1%)\n295 (9.9%) \n \n\n\n\nnjob\none-job \n \n37471 (91.9%)\n3317 (8.1%) \n \n<0.001\n\n\n\nnjob \n \n269 (84.1%)\n51 (15.9%) \n \n\n\n\nsexgp\nMen \n \n17892 (93.1%)\n1327 (6.9%) \n \n<0.001\n\n\n\nWomen \n \n19848 (90.7%)\n2041 (9.3%) \n \n\n\n\nagegp\n<25 \n \n1359 (96.6%)\n48 (3.4%) \n \n<0.001\n\n\n\n<30 \n \n2697 (94.3%)\n163 (5.7%) \n \n\n\n\n\n<35 \n \n3308 (93.6%)\n225 (6.4%) \n \n\n\n\n\n<40 \n \n3995 (92.3%)\n334 (7.7%) \n \n\n\n\n\n<45 \n \n4414 (92.2%)\n372 (7.8%) \n \n\n\n\n\n<50 \n \n4934 (92.7%)\n388 (7.3%) \n \n\n\n\n\n<55 \n \n5300 (91.9%)\n465 (8.1%) \n \n\n\n\n\n<60 \n \n5099 (90.0%)\n566 (10.0%) \n \n\n\n\n\n≥60 \n \n6634 (89.2%)\n807 (10.8%) \n \n\n\n\nedugp\nuniversity or more \n \n19597 (92.9%)\n1502 (7.1%) \n \n<0.001\n\n\n\nhigh school \n \n14943 (91.9%)\n1318 (8.1%) \n \n\n\n\n\nmiddle school or below \n \n3200 (85.4%)\n548 (14.6%) \n \n\n\n\nempgp\npaid-worker \n \n25786 (92.4%)\n2122 (7.6%) \n \n<0.001\n\n\n\nemployer/self-employer \n \n2539 (91.7%)\n229 (8.3%) \n \n\n\n\n\nown-account worker \n \n8359 (90.5%)\n880 (9.5%) \n \n\n\n\n\nunpaind family work \n \n1056 (88.5%)\n137 (11.5%) \n \n\n\n\nAGE\n \n \n46.8±12.4\n49.7±11.9 \n \n<0.001\n\n\nsatisfaction\n \n \n2.1±0.5\n2.4±0.6 \n \n<0.001\n\n\n\nP value calculated by Chisq-Test and T-Test"
  },
  {
    "objectID": "247_datamanipulation_for_table_2.html#quiz",
    "href": "247_datamanipulation_for_table_2.html#quiz",
    "title": "6  Manipulation for table_2",
    "section": "6.6 Quiz",
    "text": "6.6 Quiz\n\n6.6.1 Quiz1\n\nQuiz.1 아래의 표와 같은 결과가 나타나도록, sleepgp 대신 요통을 중심으로 표를 만들어 보세요. R script를 업로드 해주세요.\n\n\n\n\n\n\n\nBasic Characteristics according to Back Pain\n\n \nBack PAin \n\n\n\n\n \n \nNo\nPain \n \nP value\n\n\n\n\nwwa4gp\nNever \n \n14966 (75.3%)\n4911 (24.7%) \n \n<0.001\n\n\n\nRarely \n \n11430 (70.7%)\n4731 (29.3%) \n \n\n\n\n\nSometimes \n \n2435 (61.8%)\n1505 (38.2%) \n \n\n\n\n\nOften \n \n565 (56.6%)\n433 (43.4%) \n \n\n\n\n\nAlways \n \n70 (53.0%)\n62 (47.0%) \n \n\n\n\nwwa5gp\nNever \n \n15248 (75.1%)\n5058 (24.9%) \n \n<0.001\n\n\n\nRarely \n \n11436 (70.9%)\n4683 (29.1%) \n \n\n\n\n\nSometimes \n \n2246 (60.2%)\n1484 (39.8%) \n \n\n\n\n\nOften \n \n489 (57.2%)\n366 (42.8%) \n \n\n\n\n\nAlways \n \n47 (48.0%)\n51 (52.0%) \n \n\n\n\nshortReturn\nnon short return \n \n28389 (72.6%)\n10721 (27.4%) \n \n<0.001\n\n\n\nshort return \n \n1077 (53.9%)\n921 (46.1%) \n \n\n\n\nshiftWork\nnon shift work \n \n27320 (71.7%)\n10809 (28.3%) \n \n0.668\n\n\n\nshift work \n \n2146 (72.0%)\n833 (28.0%) \n \n\n\n\nsexgp\nMen \n \n14348 (74.7%)\n4871 (25.3%) \n \n<0.001\n\n\n\nWomen \n \n15118 (69.1%)\n6771 (30.9%) \n \n\n\n\nedugp\nuniversity or more \n \n16953 (80.3%)\n4146 (19.7%) \n \n<0.001\n\n\n\nhigh school \n \n10835 (66.6%)\n5426 (33.4%) \n \n\n\n\n\nmiddle school or below \n \n1678 (44.8%)\n2070 (55.2%) \n \n\n\n\nempgp\npaid-worker \n \n20969 (75.1%)\n6939 (24.9%) \n \n<0.001\n\n\n\nemployer/self-employer \n \n1961 (70.8%)\n807 (29.2%) \n \n\n\n\n\nown-account worker \n \n5927 (64.2%)\n3312 (35.8%) \n \n\n\n\n\nunpaind family work \n \n609 (51.0%)\n584 (49.0%) \n \n\n\n\nAGE\n \n \n45.2±12.3\n51.5±11.4 \n \n<0.001\n\n\n\nP value calculated by Chisq-Test and T-Test"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "241_datamanipulation.html#dplyr-tidyverse",
    "href": "241_datamanipulation.html#dplyr-tidyverse",
    "title": "4  Data Manipulation",
    "section": "4.1 dplyr (tidyverse)",
    "text": "4.1 dplyr (tidyverse)\n데이터를 모으는 입장과 데이터를 분석하는 입장은 매우 다릅니다. 데이터를 모을 때는 모으는 연구자의 입장에서 하게되고, 이를 분석하는 연구자에 맞도록 변형하는 과정이 필요합니다. 또한 표를 만들거나 도표를 만드는 과정에서 데이터의 모양을 우리가 원하는 데로 변형할 필요가 있습니다. R에서 이과정을 쉽게 하기 위해 가장 많이 사용되는 것이 dplyr (tidyverse) 입니다. 이를 이용해서 실습해 보겠습니다\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"htmlTable\")) install.packages(\"htmlTable\")\nif(!require(\"haven\")) install.packages(\"haven\")\nif(!require(\"DT\")) install.packages(\"DT\")"
  },
  {
    "objectID": "241_datamanipulation.html#실습-데이터-준비",
    "href": "241_datamanipulation.html#실습-데이터-준비",
    "title": "4  Data Manipulation",
    "section": "4.2 실습 데이터 준비",
    "text": "4.2 실습 데이터 준비\n데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다.. 데이터를 불러오겠습니다. 안전보건공단 홈페이에서 자료를 다운 받는게 원칙입니다. 다만 실습을 빠르게 진행하기 위해서, dspubs.org 페이지에 있는 파일을 이용하겠습니다.   kwcsData6th.rds   자신의 folder에 data 라는 folder가 있는지 확인하십시오. data라는 폴더에 다운로드하고, 불러오도록 하겠습니다.\n\nurl <- \"https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/kwcsData6th.rds\"\ndownload.file(url, \"data/tutorKWCS.rds\")\nkwcs = readRDS(\"data/tutorKWCS.rds\")\n\n데이터 10개만 살펴보겠습니다. 이때 head()는 처음 10개, tail() 은 뒤에 10개, slice(5:15) 은 5번째부터 15번째 까지 입니다.\n\nkwcs %>% head() %>% DT::datatable()\n\n\n\n\n\n\n > 설문지와 변수설명 파일은 아래와 같습니다. \n\ndownload.file(\"https://raw.githubusercontent.com/jinhaslab/opendata/main/kwcs/pdf3.pdf\", \"data/kwcs6thkorea.pdf\")"
  },
  {
    "objectID": "241_datamanipulation.html#select",
    "href": "241_datamanipulation.html#select",
    "title": "4  Data Manipulation",
    "section": "4.3 select",
    "text": "4.3 select\n필요한 데이터를 종으로, columns 로 분할하는 것입니다. 즉 변수명으로 데이터를 분할하는 것입니다. 선택될 변수는 변수명과 변수번호(왼쪽 부터 1번)를 이용해서 할 수 있습니다. \n처음부터 5번째 변수까지 선택해 보겠습니다 .\n\nkwcs %>% \n  select(1:5)\n\n\nkwcs %>% \n  select(id, wt, area, hh_num, hm_01_gender) \n\n\n\n# A tibble: 6 × 5\n     id    wt area      hh_num hm_01_gender\n  <dbl> <dbl> <dbl+lbl>  <dbl> <dbl+lbl>   \n1     2 0.137 3 [대구]       1 2 [여성]    \n2     3 0.350 3 [대구]       1 2 [여성]    \n3     6 0.156 7 [울산]       1 2 [여성]    \n4     8 0.228 7 [울산]       3 1 [남성]    \n5     9 0.168 7 [울산]       1 1 [남성]    \n6    10 0.675 6 [대전]       4 2 [여성]    \n\n\n변수명에 job이 들어 있는 경우 선택해 보겠습니다.\n\nkwcs %>% select(contains(\"job\")) %>% head()\n\n# A tibble: 6 × 12\n  job1     job2  job3  job3_…¹ comp_s…² job_c1 job_c1…³ job_c…⁴ job_c…⁵ job_c2  \n  <dbl+lb> <dbl> <dbl> <chr>   <dbl+lb> <dbl+> <dbl+lb> <dbl+l> <dbl+l> <dbl+lb>\n1 1 [1개]  NA    NA    \"\"       2 [대… 60     NA     … NA      NA       1 [그…\n2 1 [1개]  NA    NA    \"\"      NA     … 70     NA     … NA      NA      NA     …\n3 1 [1개]  NA    NA    \"\"       1 [대… 70     NA     … NA      NA      NA     …\n4 1 [1개]  NA    NA    \"\"      NA     … 65     NA     … NA      NA      NA     …\n5 1 [1개]  NA    NA    \"\"       3 [대… NA      1 [가… NA      NA       1 [그…\n6 1 [1개]  NA    NA    \"\"       2 [대… NA      1 [가… NA      NA      NA     …\n# … with 2 more variables: job_c3 <dbl+lbl>, njob <chr>, and abbreviated\n#   variable names ¹​job3_etc, ²​comp_sjob, ³​job_c1_666, ⁴​job_c1_888, ⁵​job_c1_999\n\n\nselect안에서는 ” ” 안에 문자가 변수 명으로 인식됩니다. 이것은 매우 중요한 개념입니다. 아래의 두 코드는 같은 결과를 줍니다. 외부에서 문자를 입력 받았어도, 바로 적용할 수 있다는 의미 입니다.\n\nkwcs %>% select(\"job1\")\n\n# A tibble: 41,108 × 1\n   job1     \n   <dbl+lbl>\n 1 1 [1개]  \n 2 1 [1개]  \n 3 1 [1개]  \n 4 1 [1개]  \n 5 1 [1개]  \n 6 1 [1개]  \n 7 1 [1개]  \n 8 1 [1개]  \n 9 1 [1개]  \n10 1 [1개]  \n# … with 41,098 more rows\n\nkwcs %>% select(job1)\n\n# A tibble: 41,108 × 1\n   job1     \n   <dbl+lbl>\n 1 1 [1개]  \n 2 1 [1개]  \n 3 1 [1개]  \n 4 1 [1개]  \n 5 1 [1개]  \n 6 1 [1개]  \n 7 1 [1개]  \n 8 1 [1개]  \n 9 1 [1개]  \n10 1 [1개]  \n# … with 41,098 more rows\n\n\n제외하는 방법은 -를 사용합니다.\n\ntest <- kwcs %>%\n  select(id, wt, area) %>%\n  head() \n\n\ntest\n\n# A tibble: 6 × 3\n     id    wt area     \n  <dbl> <dbl> <dbl+lbl>\n1     2 0.137 3 [대구] \n2     3 0.350 3 [대구] \n3     6 0.156 7 [울산] \n4     8 0.228 7 [울산] \n5     9 0.168 7 [울산] \n6    10 0.675 6 [대전] \n\n\ntest라는 데이터셑을 만들었습니다. id, wt, area라는 변수를 갖은 데이터 입니다. 여기서 id라는 변수를 제외하겠습니다.\n\ntest %>% select(-1)\n\n# A tibble: 6 × 2\n     wt area     \n  <dbl> <dbl+lbl>\n1 0.137 3 [대구] \n2 0.350 3 [대구] \n3 0.156 7 [울산] \n4 0.228 7 [울산] \n5 0.168 7 [울산] \n6 0.675 6 [대전] \n\ntest %>% select(-id)\n\n# A tibble: 6 × 2\n     wt area     \n  <dbl> <dbl+lbl>\n1 0.137 3 [대구] \n2 0.350 3 [대구] \n3 0.156 7 [울산] \n4 0.228 7 [울산] \n5 0.168 7 [울산] \n6 0.675 6 [대전]"
  },
  {
    "objectID": "241_datamanipulation.html#filter",
    "href": "241_datamanipulation.html#filter",
    "title": "4  Data Manipulation",
    "section": "4.4 filter",
    "text": "4.4 filter\nfilter 는 특정 조건에 해당하는 행(row)를 선택합니다. 예를 들어 성별 중 남성만, 여성만 선택한 다는가 특정 연령 범위를 선택합니다. 이때 몇몇 조건문을 사용합니다. ==은 같다는 뜻입니다. 아래와 같이 활용합니다.\n\nkwcs %>%\n  select(TSEX, AGE) %>%\n  filter(AGE ==55) %>%\n  head()\n\n# A tibble: 6 × 2\n  TSEX        AGE\n  <dbl+lbl> <dbl>\n1 2 [여성]     55\n2 2 [여성]     55\n3 2 [여성]     55\n4 1 [남성]     55\n5 1 [남성]     55\n6 1 [남성]     55\n\n\n&는 and |는 or 을 의미합니다. 성별과 연령을 동시에 조건을 주도록 하겠습니다.\n\nkwcs %>% \n  select(TSEX, AGE) %>%\n  filter(TSEX ==1 & AGE <17) # or == |\n\n# A tibble: 0 × 2\n# … with 2 variables: TSEX <dbl+lbl>, AGE <dbl>\n\n\n!는 아니라는 표시입니다. 이것을 통해서 간단하게 여러 조건을 생략시킬 수 있습니다.\n\nkwcs %>%\n  select(TSEX, AGE) %>%\n  filter(TSEX !=1) %>%\n  filter(AGE >=16 & AGE <18)\n\n# A tibble: 0 × 2\n# … with 2 variables: TSEX <dbl+lbl>, AGE <dbl>\n\n\n%in%를 사용하면 여러 조건을 나열하는 방법으로 선택할 수 있습니다. 명목변수 등에 사용하기 편합니다.\n\nkwcs %>%\n  select(TSEX, AGE) %>%\n  filter(TSEX %in% c(1, 2)) %>% # %in% allow multiple filtering\n  filter(!AGE >16) # ! means negative condition\n\n# A tibble: 0 × 2\n# … with 2 variables: TSEX <dbl+lbl>, AGE <dbl>"
  },
  {
    "objectID": "241_datamanipulation.html#arrange",
    "href": "241_datamanipulation.html#arrange",
    "title": "4  Data Manipulation",
    "section": "4.5 arrange",
    "text": "4.5 arrange\narrange는 순차 정렬하는 함수입니다. 정방향, 역방향이 가능합니다.\n\nkwcs %>%\n  select(AGE) %>%\n  arrange(AGE) %>%\n  head()\n\n# A tibble: 6 × 1\n    AGE\n  <dbl>\n1    19\n2    19\n3    19\n4    19\n5    19\n6    19\n\nkwcs %>%\n  select(AGE) %>%\n  arrange(desc(AGE)) %>%\n  head()\n\n# A tibble: 6 × 1\n    AGE\n  <dbl>\n1    69\n2    69\n3    69\n4    69\n5    69\n6    69"
  },
  {
    "objectID": "241_datamanipulation.html#mutate",
    "href": "241_datamanipulation.html#mutate",
    "title": "4  Data Manipulation",
    "section": "4.6 mutate",
    "text": "4.6 mutate\nmutate는 변수를 변형하는 가장 기본이면서 자주 사용되는 함수 입니다. 반드시 익숙해여쟈 하는 함수 입니다. mutate 단독으로 쓰이기 보다는 여러 조건문인 ifelse, case_when, recode를 이용합니다. 될수 있으면 ifelse보다는 case_when을 이용하는 것이 향후 SQL 등을 사용할 때 더 편할 수 있어 추천합니다.  남녀가 현재는 1인 남자, 2가 여자 입니다. 이를 male, female로 바꾸겠습니다.\n\nkwcs %>%\n  select(TSEX, AGE) %>%\n  mutate(sexgp = case_when(\n    TSEX==1 ~ 'male', \n    TSEX==2 ~ 'female'\n  )) %>%\n  head()\n\n# A tibble: 6 × 3\n  TSEX        AGE sexgp \n  <dbl+lbl> <dbl> <chr> \n1 2 [여성]     54 female\n2 2 [여성]     64 female\n3 2 [여성]     65 female\n4 2 [여성]     57 female\n5 1 [남성]     38 male  \n6 2 [여성]     47 female\n\n\n이번에는 연령을 5세 단위로 바꾸어 보겠습니다. 그리고 test1이라는 데이터로 변형시켜보겠습니다.\n\ntest1 = kwcs %>%\n  select(TSEX, AGE) %>%\n  mutate(sexgp = case_when(\n    TSEX==1 ~ 'male', \n    TSEX==2 ~ 'female'\n  )) %>%\n  mutate(agegp = case_when(\n    AGE <25 ~ \"<25\",\n    AGE <30 ~ \"<30\", \n    AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", \n    AGE <45 ~ \"<45\", \n    AGE <50 ~ \"<50\",\n    AGE <55 ~ \"<55\", \n    AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  )) %>%\n  slice(1:10)\n\ntest1에는 sexgp가 female , male 이라고 되어 있네요, 이때 female을 Female로 대문자 변화, male을 Male로 대문자 변환해 보겠습니다. recode를 사용하겠습니다.\n\ntest1 \n\n# A tibble: 10 × 4\n   TSEX        AGE sexgp  agegp\n   <dbl+lbl> <dbl> <chr>  <chr>\n 1 2 [여성]     54 female <55  \n 2 2 [여성]     64 female ≥60  \n 3 2 [여성]     65 female ≥60  \n 4 2 [여성]     57 female <60  \n 5 1 [남성]     38 male   <40  \n 6 2 [여성]     47 female <50  \n 7 2 [여성]     54 female <55  \n 8 2 [여성]     35 female <40  \n 9 2 [여성]     68 female ≥60  \n10 2 [여성]     69 female ≥60  \n\n\n만연 female, male 두개뿐이라면 이 방법이 쉬울 수 있습니다. case_when과 female, male을 적절히 사용하면 되겠습니다.\n\ntest1 %>%\n  mutate(Sexgp = recode(sexgp, \n                        \"female\" = \"Female\", \n                        \"male\"   = \"Male\"))\n\n# A tibble: 10 × 5\n   TSEX        AGE sexgp  agegp Sexgp \n   <dbl+lbl> <dbl> <chr>  <chr> <chr> \n 1 2 [여성]     54 female <55   Female\n 2 2 [여성]     64 female ≥60   Female\n 3 2 [여성]     65 female ≥60   Female\n 4 2 [여성]     57 female <60   Female\n 5 1 [남성]     38 male   <40   Male  \n 6 2 [여성]     47 female <50   Female\n 7 2 [여성]     54 female <55   Female\n 8 2 [여성]     35 female <40   Female\n 9 2 [여성]     68 female ≥60   Female\n10 2 [여성]     69 female ≥60   Female\n\n\n60세 미만을 young, 60세 이상을 old로 구분하여 young female, old female, young male, old male로 바꾸어 보겠습니다. case_when에는 처음에 사용한 것을 제외하고 나머지에서라는 뜻이 포함되어 있지요. 즉 ifelse 가 이미 숨어있습니다.\n\ntest1 %>%\n  mutate(intgp = case_when(\n    AGE <60 & TSEX == 1 ~ \"young male\", \n    AGE <60 & TSEX == 2 ~ \"young female\", \n    TSEX == 1 ~ \"old male\", \n    TSEX == 2 ~ \"old female\" \n  ))\n\n# A tibble: 10 × 5\n   TSEX        AGE sexgp  agegp intgp       \n   <dbl+lbl> <dbl> <chr>  <chr> <chr>       \n 1 2 [여성]     54 female <55   young female\n 2 2 [여성]     64 female ≥60   old female  \n 3 2 [여성]     65 female ≥60   old female  \n 4 2 [여성]     57 female <60   young female\n 5 1 [남성]     38 male   <40   young male  \n 6 2 [여성]     47 female <50   young female\n 7 2 [여성]     54 female <55   young female\n 8 2 [여성]     35 female <40   young female\n 9 2 [여성]     68 female ≥60   old female  \n10 2 [여성]     69 female ≥60   old female"
  },
  {
    "objectID": "241_datamanipulation.html#group_by",
    "href": "241_datamanipulation.html#group_by",
    "title": "4  Data Manipulation",
    "section": "4.7 group_by",
    "text": "4.7 group_by\ngroup_by는 데이터 탐색에서 가장 많이 사용되면, 연속변수는 summrise와 명목변수는 count와 같이 사용됩니다. group_by에 의해 변수값에 따라 정리가 되게 됩니다. 새로운 변수은 heal_prob1를 사용해 보겠습니다. heal_prob1는 요통여 부이고, 요통이 있으면 1, 없으면 2로 되어 있습니다. 결측값, 무응답이 많으니 heal_prob1 에 무응답이 있는 경우 제외하겠습니다. NA 결측값은 is.na(변수)로 찾을 수 있습니다. 우선 count로 해보겠습니다 .\n\nkwcs %>% \n  count(heal_prob1)\n\n# A tibble: 3 × 2\n  heal_prob1     n\n  <dbl+lbl>  <int>\n1  1 [있다]  11642\n2  2 [없다]  29437\n3 NA            29\n\n\nNA가 59개 있네요.  아래와 같이 sexgp별로 요통을 호소하는 사람이 얼마나 있는지 확인해 보겠습니다.\n\nkwcs %>%\n  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻\n  select(TSEX, AGE, heal_prob1) %>%\n  mutate(sexgp=case_when(\n    TSEX==1 ~ \"Men\", \n    TRUE ~ \"Female\"\n  )) %>%\n  group_by(sexgp) %>%\n  count(heal_prob1) \n\n# A tibble: 4 × 3\n# Groups:   sexgp [2]\n  sexgp  heal_prob1     n\n  <chr>  <dbl+lbl>  <int>\n1 Female 1 [있다]    6771\n2 Female 2 [없다]   15104\n3 Men    1 [있다]    4871\n4 Men    2 [없다]   14333\n\n\n연령별로는 어떠한 비율인지 확인해 보겠습니다.\n\nkwcs %>%\n  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻\n  select(TSEX, AGE, heal_prob1) %>%\n  mutate(sexgp=case_when(\n    TSEX==1 ~ \"Men\", \n    TRUE ~ \"Female\"\n  )) %>%\n  mutate(agegp = case_when(\n    AGE <25 ~ \"<25\",\n    AGE <30 ~ \"<30\", \n    AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", \n    AGE <45 ~ \"<45\", \n    AGE <50 ~ \"<50\",\n    AGE <55 ~ \"<55\", \n    AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  ))  %>%\n  group_by(agegp) %>%\n  count(heal_prob1)\n\n# A tibble: 18 × 3\n# Groups:   agegp [9]\n   agegp heal_prob1     n\n   <chr> <dbl+lbl>  <int>\n 1 <25   1 [있다]     144\n 2 <25   2 [없다]    1263\n 3 <30   1 [있다]     397\n 4 <30   2 [없다]    2462\n 5 <35   1 [있다]     578\n 6 <35   2 [없다]    2954\n 7 <40   1 [있다]     891\n 8 <40   2 [없다]    3430\n 9 <45   1 [있다]    1103\n10 <45   2 [없다]    3679\n11 <50   1 [있다]    1427\n12 <50   2 [없다]    3892\n13 <55   1 [있다]    1718\n14 <55   2 [없다]    4043\n15 <60   1 [있다]    2046\n16 <60   2 [없다]    3616\n17 ≥60   1 [있다]    3338\n18 ≥60   2 [없다]    4098\n\n\n한눈에 파악하기 어렵네요. 그럼 어떻게 하는 것이 좋을 까요, mutate를 통해 율을 구해보는 것이 좋겠습니다.\n\nkwcs %>%\n  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻\n  select(TSEX, AGE, heal_prob1) %>%\n  mutate(sexgp=case_when(\n    TSEX==1 ~ \"Men\", \n    TRUE ~ \"Female\"\n  )) %>%\n  mutate(agegp = case_when(\n    AGE <25 ~ \"<25\",\n    AGE <30 ~ \"<30\", \n    AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", \n    AGE <45 ~ \"<45\", \n    AGE <50 ~ \"<50\",\n    AGE <55 ~ \"<55\", \n    AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  ))  %>%\n  group_by(agegp) %>%\n  count(heal_prob1) %>%\n  mutate(prob = n/sum(n)) %>% #proportion을 구함\n  filter(heal_prob1 == 1) # 요통이 있다고한 사람을 비율만 남김. \n\n# A tibble: 9 × 4\n# Groups:   agegp [9]\n  agegp heal_prob1     n  prob\n  <chr> <dbl+lbl>  <int> <dbl>\n1 <25   1 [있다]     144 0.102\n2 <30   1 [있다]     397 0.139\n3 <35   1 [있다]     578 0.164\n4 <40   1 [있다]     891 0.206\n5 <45   1 [있다]    1103 0.231\n6 <50   1 [있다]    1427 0.268\n7 <55   1 [있다]    1718 0.298\n8 <60   1 [있다]    2046 0.361\n9 ≥60   1 [있다]    3338 0.449\n\n\n요통의 유병율이 연령이 증가할 수록 점차 증가하고 있네요, 남녀의 차이가 있을 까요? 남녀별 구분을 위해 group_by( )에 sexgp를 추가했습니다 .\n\nsmry1 = kwcs %>%\n  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻\n  select(TSEX, AGE, heal_prob1) %>%\n  mutate(sexgp=case_when(\n    TSEX==1 ~ \"Men\", \n    TRUE ~ \"Female\"\n  )) %>%\n  mutate(agegp = case_when(\n    AGE <25 ~ \"<25\",\n    AGE <30 ~ \"<30\", \n    AGE <35 ~ \"<35\", \n    AGE <40 ~ \"<40\", \n    AGE <45 ~ \"<45\", \n    AGE <50 ~ \"<50\",\n    AGE <55 ~ \"<55\", \n    AGE <60 ~ \"<60\",\n    TRUE ~ \"\\u226560\" # 나머지는 모두 >65 (\\u2265는 크거나 같다는 symbol)\n  ))  %>%\n  group_by(sexgp, agegp) %>% # 성별, 연령별\n  count(heal_prob1) %>%\n  mutate(prob = n/sum(n)) %>% #proportion을 구함\n  filter(heal_prob1 == 1) # 요통이 있다고한 사람을 비율만 남김. \nsmry1\n\n# A tibble: 18 × 5\n# Groups:   sexgp, agegp [18]\n   sexgp  agegp heal_prob1     n   prob\n   <chr>  <chr> <dbl+lbl>  <int>  <dbl>\n 1 Female <25   1 [있다]      79 0.105 \n 2 Female <30   1 [있다]     225 0.164 \n 3 Female <35   1 [있다]     314 0.180 \n 4 Female <40   1 [있다]     416 0.205 \n 5 Female <45   1 [있다]     558 0.236 \n 6 Female <50   1 [있다]     761 0.266 \n 7 Female <55   1 [있다]    1041 0.309 \n 8 Female <60   1 [있다]    1316 0.390 \n 9 Female ≥60   1 [있다]    2061 0.515 \n10 Men    <25   1 [있다]      65 0.0997\n11 Men    <30   1 [있다]     172 0.116 \n12 Men    <35   1 [있다]     264 0.148 \n13 Men    <40   1 [있다]     475 0.207 \n14 Men    <45   1 [있다]     545 0.225 \n15 Men    <50   1 [있다]     666 0.271 \n16 Men    <55   1 [있다]     677 0.284 \n17 Men    <60   1 [있다]     730 0.319 \n18 Men    ≥60   1 [있다]    1277 0.372 \n\n\n\nsummarise\n\nsummarise는 colum 별로 정리하여 나타낸는 함수 입니다. 이때 주로 같이 사용하는 함수는 mean, sd, median, max, min 등이며, quantile도 많이 사용됩니다.\n\nkwcs %>%\n  summarise(mean_age = mean(AGE), \n            std_age  = sd(AGE))\n\n# A tibble: 1 × 2\n  mean_age std_age\n     <dbl>   <dbl>\n1     47.0    12.4\n\n\ngroup_by와 함께 사용해 볼까요?\n\nkwcs %>%\n  filter(!is.na(heal_prob1)) %>% # is.na() 즉 NA이면에서 !는 NA가 아니면이라는 뜻\n  select(TSEX, AGE, heal_prob1) %>%\n  mutate(sexgp=case_when(\n    TSEX==1 ~ \"Men\", \n    TRUE ~ \"Female\"\n  )) %>%\n  group_by(sexgp) %>%\n  summarise(mean_age = mean(AGE), \n            std_age  = sd(AGE))\n\n# A tibble: 2 × 3\n  sexgp  mean_age std_age\n  <chr>     <dbl>   <dbl>\n1 Female     47.6    12.2\n2 Men        46.3    12.5\n\n\n중요한 부분인 group_by를 한후에 group을 해제하기 위해서는 ungroup()을 해주어야 합니다. 향후 Table 만들기 등에서 활용되니 기역해 주세요."
  },
  {
    "objectID": "241_datamanipulation.html#merge-join",
    "href": "241_datamanipulation.html#merge-join",
    "title": "4  Data Manipulation",
    "section": "4.8 merge, join",
    "text": "4.8 merge, join\n이번에는 두개의 테이블을 하나로 만들어 보겠습니다.\n\ntab1 <- tibble(id = c(1, 2), var1 = c(\"a1\", \"a2\"))\ntab2 <- tibble(id = c(2, 3), var2 = c(\"b1\", \"b2\"))\n\n\ntab1\n\n# A tibble: 2 × 2\n     id var1 \n  <dbl> <chr>\n1     1 a1   \n2     2 a2   \n\ntab2\n\n# A tibble: 2 × 2\n     id var2 \n  <dbl> <chr>\n1     2 b1   \n2     3 b2   \n\n\n이둘을 합쳐 보겠습니다. >full join\n\ntab1 %>%\n  full_join(tab2, by=c(\"id\"))\n\n# A tibble: 3 × 3\n     id var1  var2 \n  <dbl> <chr> <chr>\n1     1 a1    <NA> \n2     2 a2    b1   \n3     3 <NA>  b2   \n\n\n\ninner join\n\n\ntab1 %>%\n  inner_join(tab2, by=c(\"id\"))\n\n# A tibble: 1 × 3\n     id var1  var2 \n  <dbl> <chr> <chr>\n1     2 a2    b1   \n\n\n\nright join\n\n\ntab1 %>%\n  right_join(tab2, by=c(\"id\"))\n\n# A tibble: 2 × 3\n     id var1  var2 \n  <dbl> <chr> <chr>\n1     2 a2    b1   \n2     3 <NA>  b2   \n\n\n\nleft join\n\n\ntab1 %>%\n  left_join(tab2, by=c(\"id\"))\n\n# A tibble: 2 × 3\n     id var1  var2 \n  <dbl> <chr> <chr>\n1     1 a1    <NA> \n2     2 a2    b1   \n\n\n어떻게 결과가 예상과 같았나요? 아래와 같이 정리할 수 있습니다."
  }
]